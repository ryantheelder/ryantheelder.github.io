<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ryantheelder.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ryantheelder.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-15T01:23:05+00:00</updated><id>https://ryantheelder.github.io/feed.xml</id><title type="html">blank</title><subtitle>Diving deep into the realm of telecommunications security</subtitle><entry><title type="html">OTA SMS &amp;amp; Applets</title><link href="https://ryantheelder.github.io/blog/2023/OTA/" rel="alternate" type="text/html" title="OTA SMS &amp;amp; Applets"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://ryantheelder.github.io/blog/2023/OTA</id><content type="html" xml:base="https://ryantheelder.github.io/blog/2023/OTA/"><![CDATA[<p>You can locate all the necessary materials for the tutorial within <a href="https://github.com/ryantheelder/OTAapplet">this repository</a>.</p> <p>This post provides a guide on how to install and delete an applet on a phone using OTA SMS. We explain what an applet is, how OTA SMS works, and the potential risks. You’ll find clear instructions on how to use OTA SMS to install and delete applets on your phone.</p> <h1 id="system-model">System Model</h1> <p>Our system consists of the following components:</p> <ul> <li><strong>srsenb</strong>: This component acts as the eNodeB and provides the radio access network (RAN) for our system. It allows mobile devices to connect to our network and communicate with other devices.</li> <li><strong>open5gs</strong>: This component acts as the 4G core network and provides the backbone of our system. It is responsible for authenticating and authorizing devices, managing mobility, and providing connectivity between devices.</li> <li><strong>OsmoMSC</strong>: This component acts as the Short Message Service Center (SMSC) and provides the functionality to send SMS messages over the SGS interface. It is responsible for storing and forwarding messages between devices in the network. OsmoMSC also includes support for SMPP (Short Message Peer-to-Peer) protocol, which allows it to act as an SMPP server. This provides an additional way to send and receive SMS messages from the network.</li> <li><strong>OsmoHLR</strong>: This component acts as the Home Location Register (HLR) and provides the functionality to store and manage subscriber information, such as subscriber profiles, access control information, and service information. It is responsible for maintaining the subscriber database and providing the necessary information to support the network operations.</li> </ul> <p>In LTE networks, SMS messages cannot be sent over the same channels as data traffic due to technical reasons. Therefore, a separate interface known as SGs (SMS Gateway to MSC Server) is used to transfer SMS messages between the mobile device and the SMS center. This is why we are using SGs interface in our system model.</p> <p>Together, these components provide a powerful and flexible system that allows us to send SMS messages over the SGs interface. By using srsenb, open5gs, and OsmoMSC, we are able to create a reliable and efficient network that meets our needs.</p> <h1 id="steps-to-install-and-delete-an-applet-via-ota-sms-on-a-phone">Steps to Install and Delete an Applet via OTA SMS on a Phone</h1> <ol> <li>Create an applet: First, you need to create an applet that you want to install on the phone. An applet is a small software program that performs a specific task. For example, you can create an applet that displays a message when the phone is turned on.</li> <li>Convert the applet to a binary file: Once you have created the applet, you need to convert it to a binary file. A binary file is a file that contains executable code that can be run on the phone.</li> <li>Send the binary file via OTA SMS: You can send the binary file to the phone via OTA SMS. OTA SMS stands for Over-The-Air SMS, which is a method of sending SMS messages that contain executable code. The phone will receive the OTA SMS and automatically install the applet.</li> <li>Verify the applet installation: Once the applet has been installed, you can verify that it is working correctly by running it on the phone.</li> <li>Delete the applet: To delete the applet from the phone, you can send another OTA SMS message that contains a command to delete the applet. The phone will receive the OTA SMS and automatically delete the applet.</li> </ol> <h1 id="installing-the-necessary-software-components">Installing the Necessary Software Components</h1> <p>To use our system model and perform the steps described in this README.md file, you will need to install the following software components:</p> <h2 id="prereq">PreReq</h2> <pre><code class="language-code">~$ sudo apt update
~$ sudo apt upgrade
~$ sudo apt install libpcsclite-dev libtalloc-dev libortp-dev libsctp-dev libmnl-dev libdbi-dev libdbd-sqlite3 libsqlite3-dev sqlite3 libc-ares-dev
</code></pre> <h2 id="install-uhd">Install UHD</h2> <p>We will be using the USRP B210 software-defined radio (SDR) for our system model, which requires the installation of the Universal Hardware Driver (UHD). UHD is an open-source driver that provides support for a variety of Ettus Research SDRs, including the USRP B210. To install UHD for use with the USRP B210, please follow the steps below:</p> <pre><code class="language-code">~$ sudo apt-get -y install git swig cmake doxygen build-essential libboost-all-dev libtool libusb-1.0-0 libusb-1.0-0-dev libudev-dev libncurses5-dev libfftw3-bin libfftw3-dev libfftw3-doc libcppunit-1.14-0 libcppunit-dev libcppunit-doc ncurses-bin cpufrequtils python-numpy python-numpy-doc python-numpy-dbg python-scipy python-docutils qt4-bin-dbg qt4-default qt4-doc libqt4-dev libqt4-dev-bin python-qt4 python-qt4-dbg python-qt4-dev python-qt4-doc python-qt4-doc libqwt6abi1 libfftw3-bin libfftw3-dev libfftw3-doc ncurses-bin libncurses5 libncurses5-dev libncurses5-dbg libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake autoconf libtool python-dev libfftw3-dev libcppunit-dev libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev python-wxgtk3.0 git libqt4-dev python-numpy ccache python-opengl libgsl-dev python-cheetah python-mako python-lxml doxygen qt4-default qt4-dev-tools libusb-1.0-0-dev libqwtplot3d-qt5-dev pyqt4-dev-tools python-qwt5-qt4 cmake git wget libxi-dev gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libzmq3-dev libzmq5 python-requests python-sphinx libcomedi-dev python-zmq libqwt-dev libqwt6abi1 python-six libgps-dev libgps23 gpsd gpsd-clients python-gps python-setuptools
</code></pre> <pre><code class="language-code">~$ mkdir repos
~$ cd repos
~/repos$ git clone https://github.com/EttusResearch/uhd
~$ cd uhd
~/uhd$ cd host
~/uhd/host$ mkdir build
~/uhd/host$ cd build
~/uhd/host/build$ cmake ..
~/uhd/host/build$ make 
~/uhd/host/build$ sudo make install
~/uhd/host/build$ sudo ldconfig
~/uhd/host/build$ cd ~/repos
</code></pre> <p>After installation, test your UHD installation by running the <code class="language-plaintext highlighter-rouge">~/repos$ sudo uhd_find_devices</code> command in your terminal. If your USRP B210 is properly connected, it should be listed in the output.</p> <h2 id="install-srsran_4g"><strong>Install srsRAN_4G</strong></h2> <p>In addition to the software components we have already discussed, we will also be using srsRAN in our system model. srsRAN is an open-source software-defined radio access network (SD-RAN) platform that provides support for LTE and 5G New Radio (NR) networks.</p> <p>We will be using srsRAN to provide the LTE radio access network (RAN) component of our system model. srsRAN provides a flexible and scalable LTE RAN solution that can be customized and configured to meet a wide range of use cases and network configurations.</p> <p>To install srsRAN, you can follow the instructions provided bellow:</p> <pre><code class="language-code">~/repos$ sudo apt-get install build-essential cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
</code></pre> <pre><code class="language-code">~/repos$ git clone https://github.com/srsRAN/srsRAN_4G.git
~/repos$ cd srsRAN_4G
~/repos/srsRAN_4G$ mkdir build
~/repos/srsRAN_4G$ cd build
~/repos/srsRAN_4G/build$ cmake .. 
~/repos/srsRAN_4G/build$ make
~/repos/srsRAN_4G/build$ make test
~/repos/srsRAN_4G/build$ sudo make install
~/repos/srsRAN_4G/build$ srsran_4g_install_configs.sh user
</code></pre> <h2 id="install-gsm-parts"><strong>Install GSM Parts</strong></h2> <p>In addition to the LTE components we have already discussed, we will also be using two GSM components in our system model: OsmoMSC and OsmoHLR.</p> <p>OsmoMSC is a mobile switching center (MSC) component for GSM networks that provides support for voice and SMS services. OsmoHLR is a home location register (HLR) component for GSM networks that provides subscriber information and authentication services.</p> <p>To install OsmoMSC and OsmoHLR, you can follow the instructions provided next:</p> <h3 id="install-libosmocore">Install Libosmocore</h3> <pre><code class="language-code">~/repos$ sudo sudo apt-get install build-essential libtool libtalloc-dev libsctp-dev shtool autoconf automake git-core pkg-config make gcc gnutls-dev python-minimal libusb-1.0.0-dev libmnl-dev libpcsclite-dev
</code></pre> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://gitea.osmocom.org/osmocom/libosmocore.git
~/repos$ cd libosmocore/
~/repos/libosmocore$ autoreconf -i
~/repos/libosmocore$ ./configure
~/repos/libosmocore$ make
~/repos/libosmocore$ sudo make install
~/repos/libosmocore$ sudo ldconfig -i
~/repos/libosmocore$ cd ..  
</code></pre></div></div> <h3 id="install-libosmo-abis">Install Libosmo-abis</h3> <pre><code class="language-code">~/repos$ sudo apt-get install build-essential libtool libortp-dev dahdi-source libsctp-dev shtool autoconf automake git-core pkg-config make gcc
</code></pre> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://gitea.osmocom.org/osmocom/libosmo-abis.git
~/repos$ cd libosmo-abis/
~/repos/libosmo-abis$ autoreconf -i
~/repos/libosmo-abis$ ./configure
~/repos/libosmo-abis$ make
~/repos/libosmo-abis$ sudo make install
~/repos/libosmo-abis$ sudo ldconfig -i
~/repos/libosmo-abis$ cd ..  
</code></pre></div></div> <h3 id="install-libosmo-netif">Install Libosmo-netif</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://github.com/osmocom/libosmo-netif.git
~/repos$ cd libosmo-netif/
~/repos/libosmo-netif$ autoreconf -i
~/repos/libosmo-netif$ ./configure
~/repos/libosmo-netif$ make
~/repos/libosmo-netif$ sudo make install
~/repos/libosmo-netif$ sudo ldconfig -i
~/repos/libosmo-netif$ cd ..  
</code></pre></div></div> <h3 id="install-libosmo-sccp">Install Libosmo-sccp</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://github.com/osmocom/libosmo-sccp.git
~/repos$ cd libosmo-sccp/
~/repos/libosmo-sccp$ autoreconf -i
~/repos/libosmo-sccp$ ./configure
~/repos/libosmo-sccp$ make
~/repos/libosmo-sccp$ sudo make install
~/repos/libosmo-sccp$ sudo ldconfig -i
~/repos/libosmo-sccp$ cd ..  
</code></pre></div></div> <h3 id="install-osmohlr">Install OsmoHLR</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://github.com/osmocom/osmo-hlr.git
~/repos$ cd osmo-hlr/
~/repos/osmo-hlr$ autoreconf -i
~/repos/osmo-hlr$ ./configure
~/repos/osmo-hlr$ make
~/repos/osmo-hlr$ sudo make install
~/repos/osmo-hlr$ sudo ldconfig -i
~/repos/osmo-hlr$ cd ..  
</code></pre></div></div> <h3 id="install-libsmpp34">Install libsmpp34</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://github.com/osmocom/libsmpp34.git
~/repos$ cd libsmpp34/
~/repos/libsmpp34$ autoreconf -i
~/repos/libsmpp34$ ./configure
~/repos/libsmpp34$ make
~/repos/libsmpp34$ sudo make install
~/repos/libsmpp34$ sudo ldconfig -i
~/repos/libsmpp34$ cd ..  
</code></pre></div></div> <h3 id="install-asn1c">Install Asn1c</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://github.com/osmocom/libasn1c.git
~/repos$ cd libasn1c/
~/repos/libasn1c$ autoreconf -i
~/repos/libasn1c$ ./configure
~/repos/libasn1c$ make
~/repos/libasn1c$ sudo make install
~/repos/libasn1c$ sudo ldconfig -i
~/repos/libasn1c$ cd ..  
</code></pre></div></div> <h3 id="install-osmomsc">Install OsmoMSC</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos$ git clone https://gitea.osmocom.org/cellular-infrastructure/osmo-msc
~/repos$ cd osmo-msc/
~/repos/osmo-msc$ autoreconf -i
~/repos/osmo-msc$ ./configure --enable-smpp
~/repos/osmo-msc$ make
~/repos/osmo-msc$ sudo make install
~/repos/osmo-msc$ sudo ldconfig -i
~/repos/osmo-msc$ cd ..  
</code></pre></div></div> <h2 id="install-open5gs"><strong>Install open5gs</strong></h2> <p>open5gs is an open-source 5G core network implementation that provides support for a variety of 5G features, including 5G core network services, network slicing, and QoS management. We will be using open5gs to provide the core network component of our system model.</p> <p>To install open5gs, you can follow the instructions provided bellow:</p> <h3 id="getting-mongodb">Getting MongoDB</h3> <pre><code class="language-code">~/repos$ sudo apt-get install gnupg
~/repos$ curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg \
   --dearmor
~/repos$ echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
~/repos$ sudo apt-get update
~/repos$ sudo apt-get install -y mongodb-org
~/repos$ sudo apt install -y mongodb-org
~/repos$ sudo systemctl start mongod (if '/usr/bin/mongod' is not running)
~/repos$ sudo systemctl enable mongod (ensure to automatically start it on system boot)
</code></pre> <h3 id="setting-up-tun-device-not-persistent-after-rebooting">Setting up TUN device (not persistent after rebooting)</h3> <pre><code class="language-code">~/repos$ sudo ip tuntap add name ogstun mode tun
~/repos$ sudo ip addr add 10.45.0.1/16 dev ogstun
~/repos$ sudo ip addr add 2001:db8:cafe::1/48 dev ogstun
~/repos$ sudo ip link set ogstun up
</code></pre> <h3 id="building-open5gs">Building Open5GS</h3> <pre><code class="language-code">~/repos$ sudo apt install python3-pip python3-setuptools python3-wheel ninja-build build-essential flex bison git cmake libsctp-dev libgnutls28-dev libgcrypt-dev libssl-dev libidn11-dev libmongoc-dev libbson-dev libyaml-dev libnghttp2-dev libmicrohttpd-dev libcurl4-gnutls-dev libnghttp2-dev libtins-dev libtalloc-dev meson
</code></pre> <pre><code class="language-code">~/repos$ git clone https://github.com/open5gs/open5gs
~/repos$ cd open5gs
~/repos/open5gs$ meson build --prefix=`pwd`/install
~/repos/open5gs$ ninja -C build
~/repos/open5gs$ ./build/tests/attach/attach ## EPC Only
~/repos/open5gs$ ./build/tests/registration/registration ## 5G Core Only
~/repos/open5gs$ cd build
~/repos/open5gs/build$ meson test -v
~/repos/open5gs/build$ ninja install
~/repos/open5gs/build cd ~/repos
</code></pre> <h1 id="configuring-the-software-components">Configuring the Software Components</h1> <p>To ensure that the system model works properly, it is important to configure the different software components correctly. Some components, such as the MME, OsmoMSC, and srsENB, are more critical than others and require extra attention during the configuration process.</p> <h2 id="osmomsc">OsmoMSC</h2> <p>The OsmoMSC, or Open Source Mobile Switching Center, is responsible for the management of voice and SMS services in the system model. To configure the OsmoMSC, you will need to specify various parameters such as the MSC number, HLR address, and SMSC address. These parameters can be configured using the <code class="language-plaintext highlighter-rouge">/usr/local/etc/osmocom/osmo-msc.cfg</code> file provided by the OsmoMSC project.</p> <p>This is a sample test configuration.</p> <pre><code class="language-code">!
! OsmoMSC configuration saved from vty
!
line vty
 no login
!
network
 network country code 1
 mobile network code 1
 short name OsmoMSC
 long name OsmoMSC
 encryption a5 0
 rrlp mode none
 mm info 1
 mgw 0
  remote-ip 127.0.0.1
  remote-port 2427
  local-port 2728

sgs
 local-port 29118
 local-ip 0.0.0.0
 vlr-name vlr.msc001.mnc001.mcc001.3gppnetwork.org
smpp
 local-tcp-ip 127.0.0.25 2755
 system-id hello
 policy accept-all
 no smpp-first
 esme hi
  password 123
msc
 assign-tmsi
 auth-tuple-max-reuse-count 3
 auth-tuple-reuse-on-error 1
</code></pre> <h2 id="mme">MME</h2> <p>The MME, or Mobility Management Entity, is a key component of the 4G core network that handles the management of user mobility and authentication. To configure the MME properly, you will need to specify various parameters such as the PLMN ID, TAI list, and security settings. These parameters can be configured using the <code class="language-plaintext highlighter-rouge">~/repos/open5gs/install/etc/open5gs/mme.conf</code> file provided by the Open5GS project.</p> <p>This is a sample test configuration.</p> <pre><code class="language-code">logger:
    file: ~/repos/open5gs/install/var/log/open5gs/mme.log


mme:
    freeDiameter: ~/repos/open5gs/install/etc/freeDiameter/mme.conf
    s1ap:
      - addr: 127.0.0.2
    gtpc:
      - addr: 127.0.0.2
    metrics:
      - addr: 127.0.0.2
        port: 9090
    sgsap:
      addr: 127.0.0.1
      map:
        tai:
          plmn_id:
            mcc: 001
            mnc: 01
          tac: 1
        lai:
          plmn_id:
            mcc: 001
            mnc: 01
          lac: 1
    gummei:
      plmn_id:
        mcc: 001
        mnc: 01
      mme_gid: 2
      mme_code: 1
    tai:
      plmn_id:
        mcc: 001
        mnc: 01
      tac: 1
    security:
        integrity_order : [ EIA2, EIA1, EIA0 ]
        ciphering_order : [ EEA0, EEA1, EEA2 ]
    network_name:
        full: Open5GS
    mme_name: open5gs-mme0

sgwc:
    gtpc:
      - addr: 127.0.0.3

smf:
    gtpc:
      - addr: 
        - 127.0.0.4
        - ::1


parameter:

usrsctp:


time:
</code></pre> <h2 id="srsenb">srsENB</h2> <p>The srsENB, or software-defined Radio Access Network eNodeB, is responsible for handling the radio communications between the user devices and the 4G core network. To configure the srsENB, you will need to specify various parameters such as the frequency band, cell ID, and MCC/MNC. These parameters can be configured using the <code class="language-plaintext highlighter-rouge">/home/gcatcher/.config/srsran/enb.conf</code> file provided by the srsENB project.</p> <h3 id="other-components">Other Components</h3> <p>All the necessary configuration files are provided in the “configs” folder of this repository. To properly run the system, it’s essential to correctly configure the MME, OsmoMSC, and srsENB components. Make sure to carefully follow the instructions and modify the configuration files according to your specific setup before running the software.</p> <h1 id="how-to-use">How to use?</h1> <ol> <li>Create an applet: First, you need to create an applet that you want to install on the phone. An applet is a small software program that performs a specific task. For example, you can create an applet that displays a message when the phone is turned on.</li> <li>Convert the applet to a binary file: Once you have created the applet, you need to convert it to a binary file. A binary file is a file that contains executable code that can be run on the phone.</li> <li>Send the binary file via OTA SMS: You can send the binary file to the phone via OTA SMS. OTA SMS stands for Over-The-Air SMS, which is a method of sending SMS messages that contain executable code. The phone will receive the OTA SMS and automatically install the applet.</li> <li>Verify the applet installation: Once the applet has been installed, you can verify that it is working correctly by running it on the phone.</li> <li>Delete the applet: To delete the applet from the phone, you can send another OTA SMS message that contains a command to delete the applet. The phone will receive the OTA SMS and automatically delete the applet.</li> </ol> <h2 id="1-create-an-applet-and-convert-it-to-an-apdu">1. Create an Applet and convert it to an APDU</h2> <h3 id="shadytel-sim-tools">Shadytel SIM Tools</h3> <p>Shadytel SIM (<a href="https://gitea.osmocom.org/sim-card/sim-tools/">Main Project</a>) tools are a set of open-source software components that provide support for SIM card emulation and management. The Shadytel SIM Tools project also includes a set of tools for creating Application Protocol Data Units (APDU) that can be used to write SIM Toolkit Applets. SIM Toolkit Applets are small software applications that run on the SIM card and provide additional functionality beyond the standard GSM features.</p> <p>To download a sample applet and convert it to APDU using Shadytel, follow these steps:</p> <ol> <li>Clone the sim-tools repository: <pre><code class="language-code">~/repos$ git clone https://github.com/herlesupreeth/sim-tools.git
</code></pre> </li> <li>Clone the “hello-stk” sample applet and then Build the applet: <pre><code class="language-code">~/repos$ git clone https://gitea.osmocom.org/sim-card/hello-stk
~/repos$ cd hello-stk/hello-stk/
~/repos/hello-stk/hello-stk$ make
~/repos/hello-stk/hello-stk$ cd ~/repos/sim-tools/shadysim
</code></pre> <p>Run the Shadytel command to convert the applet to APDU:</p> <pre><code class="language-code">~/repos/sim-tools/shadysim$ python3 shadysim_isim.py --pcsc -l ~/repos/hello-stk/hello-stk/build/javacard/org/toorcamp/HelloSTK/javacard/HelloSTK.cap -i ~/repos/hello-stk/hello-stk/build/javacard/org/toorcamp/HelloSTK/javacard/HelloSTK.cap \
       --enable-sim-toolkit --module-aid d07002ca44900101 \
       --instance-aid d07002CA44900101 \
       --nonvolatile-memory-required 0100 \ 
       --volatile-memory-for-install 0100 \
       --max-menu-entry-text 15 \
       --max-menu-entries 05 --kic KIC1 \
       --kid KID1 \
       --smpp
</code></pre> <p>After converting the sample applet to an APDU, we can send it to the phone using a SMPP client. We can send several APDUs to perform different operations on the phone, such as sending SMS or making calls. To do this, we need to have access to a SMPP server that can handle our requests. In our case, we are using OsmoMSC as the SMPP server. We can send the APDUs to the SIM card by connecting to the SMPP server using a SMPP client. The OsmoMSC will then forward the SMPP messages over the SGS interface to the SRS eNodeB, which will in turn send the SMS messages to the SIM card.</p> </li> </ol> <p>To send an SMS message using an SMPP client, the client first establishes a connection with the SMPP server. This is typically done using the bind operation, which authenticates the client with the server and establishes a session. Once the session is established, the client can send SMS messages to the SMPP server using the submit_sm command.</p> <p>In the case of our system model and GitHub page, we can use an SMPP client to send APDUs to OsmoMSC, which acts as the SMPP server. The APDUs can be sent as SMS messages using the SMPP protocol, and OsmoMSC will then forward the APDUs to the appropriate SIM card.</p> <p>The SMPP client code can be found in the smpp directory provided for our system model. The code is written in Python and uses the smpp library to establish a connection with OsmoMSC. Once the connection is established, the client can send APDUs to OsmoMSC using the submit_sm command.</p> <p>The shadytel command (mentioned above) gives us several APDUs, which are then saved in a list variable named parts.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/repos/sim-tools/shadysim$ cd ~
~$ mkdir scripts
~$ cd scripts
~$ nano OTA.py    # save the file (This is a commnet)
#!/usr/bin/env python3
# -*- encoding: UTF-8 -*-
import logging
import sys

import smpplib.gsm
import smpplib.client
import smpplib.consts

logging.basicConfig(level = logging.DEBUG,
	format = "%(levelname)s %(filename)s:%(lineno)d %(message)s")

client = smpplib.client.Client('127.0.0.25', 2755)

# Print when obtain message_id
client.set_message_sent_handler(
	lambda pdu: sys.stdout.write('sent {} {}\n'.format(pdu.sequence, pdu.message_id)))
client.set_message_received_handler(
	lambda pdu: sys.stdout.write('delivered {}\n'.format(pdu.receipted_message_id)))

client.connect()
client.bind_transceiver(system_id='hi', password='123')

def send_normal(string='', dest='1234', source='1234'):
	parts, encoding_flag, msg_type_flag = smpplib.gsm.make_parts(string)
	#part = b"".join(parts)
	try:
		string.encode("ascii")
		coding = encoding_flag
	except:
		coding = smpplib.consts.SMPP_ENCODING_ISO10646
	logging.info('Sending SMS "%s" to %s' % (string, dest))
	for part in parts:
		pdu = client.send_message(
			msg_type=smpplib.consts.SMPP_MSGTYPE_USERACK,
			source_addr_ton=smpplib.consts.SMPP_TON_ALNUM,
			source_addr_npi=smpplib.consts.SMPP_NPI_ISDN,
			source_addr=source,
			dest_addr_ton=smpplib.consts.SMPP_TON_INTL,
			dest_addr_npi=smpplib.consts.SMPP_NPI_ISDN,
			destination_addr=dest,
			short_message=part,
			data_coding=coding,
			esm_class=msg_type_flag,
			#esm_class=smpplib.consts.SMPP_MSGMODE_FORWARD,
			registered_delivery=True,
		)
		#print(pdu.generate())
	logging.debug(pdu.sequence)


def send_ota(dest='1234', source='1234'):
	parts = [
		"027000003815060115150000003195dbcde566d446530344668ac12e0297644e40c37f9c304458542bbe49d311ca134012c29b073b70c17974d4fbe00e",
		"0270000068150601151500000093f53ae199da31cdee0c54b4b2f752a0541f52e60abe1cdce2b80e4be4d0dfeb6782bf434a075e0f49d96405891e8dac0bd341c42e9fd79b3c643164da1bfb1b1c7f5fd6c0a432e42599a1ac2667ae440b51e0e72a5ac766443ee3021ea3c71e",
		"027000006815060115150000000ac6e4282d7a1c15efcbbb9b67a0719248b2f9f00c5b7bf1f77ef28516f9bdb6783d00799d56622a92206c11db865b786185fe2f3bd9a51184207b9f7e29c19ff453a371b0fdba6b7313c0bac103dd09cd5614abe427158307ef3c9a0198a1a9",
		"02700000681506011515000000cdaf748da20a6379092226fe988f0bcfc0a1090dd44dd83d2dec74be6d98aff0a7ada1cfe87c8105eecf17cd6f6b806b9f74e82279e650628a325c3dea58c63c167fc4792183b6b1e0ae4031a5fb03544ab014afd4cb78140fdc1024cbfc917f",
	    "0270000068150601151500000014f40e210b02d9657ac3782c44f9a8d9d2b7eae662db03b0a175527d0dc4828bfa9c3ebe0bd8fc7fce7d9cf33c2f2eb5807d942d17ab9fe76f523df8834fc2ef147de2a1d9e96b39267a2125c24df89a0f0ec1fe539e09dcf1c4400e51043dc3",
	    "027000006815060115150000000c7e602ab93fce7d80191ddb7dd9ee2e985c92ef1e533cc6d64d4fde4e6e5733d233eddcb67d24bca6f62ccd8258812576818745be41262e4a6848b1ec137467e8962d1d6433731552ce3e81beec4eb572fcdcb5acd8e805edcdd783f30ed00e",
	    "02700000581506011515000000b1526b32cf5b52c20a2c9ee0d4dbc2c93c43d1c760369963af265f9cbac1f813fe7156be887d8cd69eee2d7a2c900f9ecf777d7ee8e7162c3134eefb6dae7f7e9aa058e3eb51985aeee463142ceb16d4",
	    "027000006015060115150000006b23de2bddfefbc723085bee46081c93977d5fc9e55d1b568e203f1ce10c8c228976201c7f3c5be313dff41210aafc591f13ccd2a2913384ac55e85b9cc77d1e7066bda84bcb9dc8166013f6ab09aed9f882ef7cd2e73436"
	]   
	# parts = [
	# 	"02700000301506011515000000d7d5afccd1161ebf2c64850167628c59b8684fd115542c39aac5a4fa8b1a53f0dc2816b48bdffdfb"
	# ]
	# logging.info('Sending OTA PDU to %s' % (dest))

	for part in parts:
		pdu = client.send_message(
			# source_addr_ton=smpplib.consts.SMPP_TON_INTL,
			# source_addr='0',
			dest_addr_ton=smpplib.consts.SMPP_TON_INTL,
			destination_addr='12345678900',
			short_message=bytes.fromhex(part),
			data_coding=246,
			esm_class=64,
			registered_delivery=True,
		)
		print(pdu.sequence)


if __name__ == "__main__":
	# message = sys.argv[1]
	# send_normal(string=message)
	send_ota()

</code></pre></div></div> <p>To delete the applet same process goes on with a little difference:</p> <pre><code class="language-code">~/repos/sim-tools/shadysim$ python3 shadysim_isim.py --pcsc -d d07002CA449001 \
          --kic KIC1 \
          --kid KID1 \
          --smpp
</code></pre> <p>This command (mentioned above) gives us several APDUs, which are then saved in a list variable named parts. As mentioned in the python code above, there are two list variables named parts, one for deleting and one for installing the applet. You can commnet one of them as you want to install or delete the applet.</p> <h2 id="2-running-open5gs-components">2. Running open5gs Components</h2> <p>Better to use something like Tmux.</p> <pre><code class="language-code"># Terminal 1
~$ ~/repos/open5gs/install/bin/open5gs-mmed
</code></pre> <pre><code class="language-code"># Terminal 2
~$ ~/repos/open5gs/install/bin/open5gs-hssd
</code></pre> <pre><code class="language-code"># Terminal 3
~$ ~/repos/open5gs/install/bin/open5gs-pcrfd
</code></pre> <pre><code class="language-code"># Terminal 4
~$ ~/repos/open5gs/install/bin/open5gs-sgwcd
</code></pre> <pre><code class="language-code"># Terminal 5
~$ ~/repos/open5gs/install/bin/open5gs-sgwud
</code></pre> <pre><code class="language-code"># Terminal 6
~$ ~/repos/open5gs/install/bin/open5gs-smfd
</code></pre> <pre><code class="language-code"># Terminal 7
~$ ~/repos/open5gs/install/bin/open5gs-upfd
</code></pre> <h3 id="2-running-gsm-components">2. Running GSM Components</h3> <pre><code class="language-code"># Terminal 8
~$ sudo osmo-msc -c /usr/local/etc/osmocom/osmo-msc.cfg
</code></pre> <pre><code class="language-code"># Terminal 9
~$ sudo osmo-hss -c /usr/local/etc/osmocom/osmo-hss.cfg
</code></pre> <h2 id="3-register-subscriber-information-in-hss-open5gs-database">3. Register Subscriber Information in HSS (open5gs) database</h2> <p>You can refer to <a href="https://open5gs.org/open5gs/docs/guide/02-building-open5gs-from-sources/">Open5gs</a> for more information</p> <h2 id="4-register-subscriber-information-in-hlr-osmocom-database">4. Register Subscriber Information in HLR (osmocom) database</h2> <p>Make sure osmo-hlr is running.</p> <pre><code class="language-code">~$ sudo telnet 127.0.0.1 4258
OsmoHLR&gt; enable
OsmoHLR# subscriber imsi THEIMSI create
# Check as bellow (This is a comment)
OsmoHLR# show subscribers all
ID     MSISDN        IMSI              IMEI              NAM
-----  ------------  ----------------  ----------------  -----
1      none          123456789          -------------    CSPS
# Update MSISDN so you can send SMS and OTA (This is a commnet)
OsmoHLR# subscriber imsi THEIMSI update msisdn THEMSISDN
OsmoHLR# show subscribers all
ID     MSISDN        IMSI              IMEI              NAM
-----  ------------  ----------------  ----------------  -----
1      1234          123456789          -------------    CSPS  
 Subscribers Shown: 1
</code></pre> <h2 id="5-run-the-following-script-to-installdelete-the-applet">5. Run the following Script to install/delete the applet</h2> <pre><code class="language-code">$ python3 smpp.py
</code></pre>]]></content><author><name></name></author><category term="OTA"/><category term="SMS"/><category term="Applet"/><category term="LTE"/><category term="GSM"/><category term="Open5GS"/><category term="Osmocom"/><category term="SRS"/><summary type="html"><![CDATA[Installing and Deleting an Applet via OTA SMS]]></summary></entry><entry><title type="html">VxLTE Setup</title><link href="https://ryantheelder.github.io/blog/2023/VoLTE/" rel="alternate" type="text/html" title="VxLTE Setup"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://ryantheelder.github.io/blog/2023/VoLTE</id><content type="html" xml:base="https://ryantheelder.github.io/blog/2023/VoLTE/"><![CDATA[<p>You can locate all the necessary materials for the tutorial within <a href="https://github.com/ryantheelder/open5gs_kamailio">this repository</a>.</p> <h1 id="introduction">Introduction</h1> <p>The following content(What is VoLTE?) is from <a href="https://www.ericsson.com/en/volte">Ericsson</a>. you can aslo read more in <a href="https://en.wikipedia.org/wiki/Voice_over_LTE">Wikipedia</a>.</p> <h3 id="what-is-volte">What is VoLTE?</h3> <p>VoLTE (voice over LTE) is the foundation for evolving mobile voice and communication services for packet switched 4G, Wi-Fi and 5G networks. It is the mainstream mobile network technology for enabling globally interoperable voice and communication services, using IP Multimedia Subsystem (IMS). VoLTE enables high-quality and seamless HD voice services across a multitude of devices like smartphones, smartwatches and enterprise end-points. IMS also enables 5G voice and communication services.</p> <h3 id="what-are-the-benefits-of-volte">What are the benefits of VoLTE?​</h3> <ul> <li>VoLTE enables improved and innovative voice and communication services across smartphones, wearables, smart speakers, other devices and enterprise end-points over LTE, Wi-Fi and 5G networks​</li> <li>It provides a foundation for improving business and enterprise collaboration services in combination with high-quality mobile voice services​</li> <li>VoLTE provides telecom grade services for consumers, businesses, enterprises and industries and is deployed with cloud-based solutions ​</li> </ul> <h1 id="tested-setup"><strong>Tested Setup</strong></h1> <p><strong>Host Machine:</strong></p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>lsb_release <span class="nt">-a</span>
<span class="go">Distributor ID: Ubuntu
Description:    Ubuntu 18.04.6 LTS
Release:        18.04
Codename:       bionic
</span></code></pre></div></div> <p><strong>CPU Info:</strong></p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /proc/cpuinfo  | <span class="nb">grep</span> <span class="s1">'name'</span>| <span class="nb">uniq</span>
<span class="go">model name      : 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz
</span></code></pre></div></div> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /proc/cpuinfo  | <span class="nb">grep </span>process| <span class="nb">wc</span> <span class="nt">-l</span>
<span class="go">8
</span></code></pre></div></div> <p><strong>Software Defined Radio (SDR)</strong>:</p> <p><a href="https://www.ettus.com/all-products/ub210-kit/">Ettus USRP B210</a>:</p> <ul> <li>With USB 3.0</li> <li>GPS antenna is NOT used.</li> <li>10Mhz GPS-DO is NOT used.</li> <li>1PPS input of USRP open/unused!</li> <li>GPS input of USRP open/unused!</li> </ul> <p><strong>Phones:</strong></p> <ul> <li>Honor 20 (Android)</li> <li>Xiamoi</li> </ul> <p><strong>USIM</strong></p> <ul> <li>Sysmocom USIM - sysmoUSIM-SJS1</li> </ul> <h1 id="installation"><strong>Installation</strong></h1> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt update
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt upgrade
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> mysql-server tcpdump screen ntp ntpdate git-core dkms gcc flex bison libmysqlclient-dev make <span class="se">\</span>
<span class="go">libssl-dev libcurl4-openssl-dev libxml2-dev libpcre3-dev bash-completion g++ autoconf rtpproxy libmnl-dev libsctp-dev ipsec-tools libradcli-dev \
libradcli4
</span></code></pre></div></div> <h2 id="clone-kamailio-repository-and-checkout-53-version-of-repository"><strong>Clone Kamailio repository and checkout 5.3 version of repository</strong></h2> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">mkdir</span> <span class="nt">-p</span> /usr/local/src/
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /usr/local/src/
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>git clone https://github.com/herlesupreeth/kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>kamailio
<span class="gp">$</span><span class="w"> </span>git checkout <span class="nt">-b</span> 5.3 origin/5.3
</code></pre></div></div> <h2 id="generate-build-config-files"><strong>Generate build config files</strong></h2> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /usr/local/src/kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make cfg
</code></pre></div></div> <p>Successful build ends as follow:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make cfg
<span class="c">.
.
.
</span><span class="go">make[1]: Leaving directory '/usr/local/src/kamailio/src'
</span><span class="gp">$</span><span class="w">
</span></code></pre></div></div> <h2 id="enable-mysql-module-and-all-required-ims-modules"><strong>Enable MySQL module and all required IMS modules</strong></h2> <p>Edit <strong>modules.lst</strong> file present at /usr/local/src/kamailio/src with nano (or whatever text editor you prefer):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano /usr/local/src/kamailio/src/modules.lst
</code></pre></div></div> <p>The contents of <strong>modules.lst</strong> should be as follow:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># this file is autogenerated by make modules-cfg

# the list of sub-directories with modules
modules_dirs:=modules

# the list of module groups to compile
cfg_group_include=

# the list of extra modules to compile
include_modules= cdp cdp_avp db_mysql dialplan ims_auth ims_charging ims_dialog ims_diameter_server ims_icscf ims_ipsec_pcscf ims_isc ims_ocs ims_qos ims_registrar_pcscf ims_registrar_scscf ims_usrloc_pcscf ims_usrloc_scscf outbound presence presence_conference presence_dialoginfo presence_mwi presence_profile presence_reginfo presence_xml pua pua_bla pua_dialoginfo pua_reginfo pua_rpc pua_usrloc pua_xmpp sctp tls utils xcap_client xcap_server xmlops xmlrpc

# the list of static modules
static_modules=

# the list of modules to skip from compile list
skip_modules=

# the list of modules to exclude from compile list
exclude_modules= acc_json acc_radius app_java app_lua app_lua_sr app_mono app_perl app_python app_python3 app_ruby auth_ephemeral auth_identity auth_radius cnxcc cplc crypto db2_ldap db_berkeley db_cassandra db_mongodb db_oracle db_perlvdb db_postgres db_redis db_sqlite db_unixodbc dnssec erlang evapi geoip geoip2 gzcompress h350 http_async_client http_client jansson janssonrpcc json jsonrpcc kafka kazoo lcr ldap log_systemd lost memcached misc_radius ndb_cassandra ndb_mongodb ndb_redis nsq osp peering phonenum pua_json rabbitmq regex rls rtp_media_server snmpstats systemdops topos_redis uuid websocket xhttp_pi xmpp $(skip_modules)

modules_all= $(filter-out modules/CVS,$(wildcard modules/*))
modules_noinc= $(filter-out $(addprefix modules/, $(exclude_modules) $(static_modules)), $(modules_all)) 
modules= $(filter-out $(modules_noinc), $(addprefix modules/, $(include_modules) )) $(modules_noinc) 
modules_configured:=1
</code></pre></div></div> <h2 id="compile-and-install-kamailio"><strong>Compile and install Kamailio</strong></h2> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /usr/local/src/kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">export </span><span class="nv">RADCLI</span><span class="o">=</span>1
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make <span class="nv">Q</span><span class="o">=</span>0 all | <span class="nb">tee </span>make_all.txt
</code></pre></div></div> <p>Successful build ends as follow:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make <span class="nv">Q</span><span class="o">=</span>0 all | <span class="nb">tee </span>make_all.txt
<span class="c">.
.
.
</span><span class="go">make[2]: Leaving directory '/usr/local/src/kamailio/src/modules/counters'
make[1]: Leaving directory '/usr/local/src/kamailio/src'
</span><span class="gp">$</span><span class="w">
</span></code></pre></div></div> <p>Finally install kamailio as follow:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make <span class="nb">install</span> | <span class="nb">tee </span>make_install.txt
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ldconfig
</code></pre></div></div> <p>The binaries and executable scripts are installed in: /usr/local/sbin: you can check if installation is successful with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> /usr/local/sbin
<span class="go">... kamailio  kamcmd  kamctl  kamdbctl ...
</span></code></pre></div></div> <p>To be able to use the binaries from command line (from whichever directory you’re in), make sure that /usr/local/sbin is set in PATH environment variable. You can check that with echo $PATH. as follow (You sould be able to see if /usr/local/sbin exists):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="nv">$PATH</span>
<span class="go">... : ... :  /usr/local/sbin: ... : ...
</span></code></pre></div></div> <p>If not and you are using bash, open /root/.bash_profile (<code class="language-plaintext highlighter-rouge">sudo nano /root/.bash_profile</code>) and at <strong>the end</strong> add the following content:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">PATH=$</span>PATH:/usr/local/sbin
<span class="go">export PATH
</span></code></pre></div></div> <p>Note that:</p> <ul> <li> <p>Kamailio modules are installed at: <strong>/usr/local/lib64/kamailio/modules</strong></p> </li> <li> <p>The documentation and readme files are installed at: <strong>/usr/local/share/doc/kamailio</strong></p> </li> <li> <p><strong>The configuration files</strong> are installed at: <strong>/usr/local/etc/kamailio</strong></p> </li> </ul> <p>In case you set the PREFIX variable in make cfg command, then replace /usr/local in all paths above with the value of PREFIX in order to locate the files installed.</p> <h2 id="populate-mysql-database-using-kamctlrc-command"><strong>Populate MySQL database using kamctlrc command</strong></h2> <p>Edit SIP_DOMAIN and DBENGINE in the <strong>/usr/local/etc/kamailio/kamctlrc</strong> configuration file (Used by kamctl and kamdbctl tools) as follow:</p> <ol> <li>open the file withe nano or any editor: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano /usr/local/etc/kamailio/kamctlrc
</code></pre></div> </div> </li> <li>Add or uncomment(then edit) these parts of the file:</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
.
.
SIP_DOMAIN=ims.mnc001.mcc001.3gppnetwork.org
DBENGINE=MYSQL
.
.
.
</code></pre></div></div> <p>Note that <strong>SIP_DOMAIN</strong> is SIP service domain (or IP address if you don’t have a DNS hostname associated with your SIP service). You can also edit other parts of the file as you want.</p> <p>Once you are done updating <strong>kamctlrc</strong> file, run the script to create the database used by Kamailio (When prompted for mysql root user password enter the root password if its is set or else <strong>leave it blank</strong> i.e. <strong>Press Enter</strong>):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>kamdbctl create
</code></pre></div></div> <p>check database manually;</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql
<span class="gp">&lt;mysql&gt;</span><span class="w"> </span>show databases<span class="p">;</span>
<span class="gp">&lt;mysql&gt;</span><span class="w"> </span>use kamailio<span class="p">;</span>
<span class="gp">&lt;mysql&gt;</span><span class="w"> </span>show tables<span class="p">;</span>
<span class="gp">&lt;mysql&gt;</span><span class="w"> </span><span class="k">select</span> <span class="k">*</span> from subscriber<span class="p">;</span>
</code></pre></div></div> <p>Note that No Subscribers are added yet.</p> <h2 id="edit-etcdefaultrtpproxy-file-as-follows"><strong>Edit /etc/default/rtpproxy file as follows:</strong></h2> <ol> <li>open rtpproxy file located in <strong>/etc/default/rtpproxy</strong> as follows:</li> </ol> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano /etc/default/rtpproxy
</code></pre></div></div> <ol> <li>change the whole file to be like bellow:</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Defaults for rtpproxy

# The control socket.
#CONTROL_SOCK="unix:/var/run/rtpproxy/rtpproxy.sock"
# To listen on an UDP socket, uncomment this line:
#CONTROL_SOCK=udp:127.0.0.1:22222
CONTROL_SOCK=udp:127.0.0.1:7722

# Additional options that are passed to the daemon.
EXTRA_OPTS="-l 172.24.15.30 -d DBUG:LOG_LOCAL0"
</code></pre></div></div> <p>where yoou should change <strong>172.24.15.30</strong> with your public IP. To determine your public IP:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install </span>curl
<span class="gp">$</span><span class="w"> </span>curl icanhazip.com
<span class="go">Your public IP
</span><span class="gp">$</span><span class="w">
</span></code></pre></div></div> <p>Then run,</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl restart rtpproxy
</code></pre></div></div> <h2 id="edit-configuration-file-to-fit-your-requirements-for-the-voip-platform"><strong>Edit configuration file to fit your requirements for the VoIP platform</strong></h2> <p>You have to edit <strong>kamailio.cfg</strong> located in /usr/local/etc/kamailio/<strong>kamailio.cfg</strong> configuration file.</p> <p>Add the follwing lines after #!KAMAILIO line at the top of the config file (kamailio.cfg):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!define WITH_MYSQL
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_NAT
</code></pre></div></div> <p>uncomment this line an change it as bellow:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>auto_aliases=no
</code></pre></div></div> <p>Uncomment this line an uncomment this line and enter the DNS domain created above as bellow:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alias="ims.mnc001.mcc001.3gppnetwork.org"   
</code></pre></div></div> <p>Uncomment this line (and add another listen=… as bellow), 10.4.128.21 is Your internal IP (Private IP) and 172.24.15.30 is the Public/Floating IP (Public IP).</p> <p>Depending on your network setup, You should be able to figure out your Private IP and change both values of 10.4.128.21 to your Private IP. Earlier I mentioned how to know your Public IP. change both values of 172.24.15.30 to your Public IP.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>listen=udp:10.4.128.21:5060 advertise 172.24.15.30:5060
listen=tcp:10.4.128.21:5060 advertise 172.24.15.30:5060
</code></pre></div></div> <p>For my case, it would be like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>listen=udp:172.30.75.103:5060 advertise 194.225.167.79:5060
listen=tcp:172.30.75.103:5060 advertise 194.225.167.79:5060
</code></pre></div></div> <p>Further, we will need to modify the rtpproxy_sock value to match the CONTROL_SOCK option we set for RTPProxy in /etc/default/rtpproxy:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
</code></pre></div></div> <h2 id="the-initd-script"><strong>The</strong> init.d <strong>script</strong></h2> <p>The <strong>init.d</strong> script can be used to start/stop the Kamailio server in a nicer way. A sample of init.d script for Kamailio is provided at:</p> <p>/usr/local/src/kamailio/pkg/kamailio/deb/debian/kamailio.init Copy the init file into the /etc/init.d/kamailio. Then change the permissions:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo cp</span> /usr/local/src/kamailio/pkg/kamailio/deb/bionic/kamailio.init /etc/init.d/kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo chmod </span>755 /etc/init.d/kamailio
</code></pre></div></div> <p>Then edit the /etc/init.d/kamailio file updating the $DAEMON and $CFGFILE values. first open the file like this (or any editor):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano /etc/init.d/kamailio
</code></pre></div></div> <p>Then find the follwing variables in the file and change them as bellow:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin
DAEMON=/usr/local/sbin/kamailio
CFGFILE=/usr/local/etc/kamailio/kamailio.cfg
</code></pre></div></div> <p>You need to setup a configuration file in the /etc/default/ directory. This file can be found at:</p> <p><strong>/usr/local/src/kamailio/pkg/kamailio/deb/bionic/kamailio.default</strong></p> <p>You need to rename the /etc/default/kamailio file to ‘kamailio’ after you’ve copied it. Do this as bellow:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo cp</span> /usr/local/src/kamailio/pkg/kamailio/deb/bionic/kamailio.default /etc/default/kamailio
</code></pre></div></div> <p>Then edit this file (located at: /etc/default/kamailio) and set RUN_KAMAILIO=yes. Edit the other options as per your setup. (as bellow)</p> <ol> <li>Open the kamailio file located in /etc/default/kamailio with any editor. for example: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano /etc/default/kamailio
</code></pre></div> </div> </li> <li>Find the following line in the file and <strong>uncommnet it</strong>. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#RUN_KAMAILIO=yes
</code></pre></div> </div> <p>Then run:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl daemon-reload
</code></pre></div> </div> </li> </ol> <p>Create the directory for pid file:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /var/run/kamailio
</code></pre></div></div> <p>Default setting is to run Kamailio as user kamailio and group kamailio. For that you need to create the user and set ownership</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>adduser <span class="nt">--quiet</span> <span class="nt">--system</span> <span class="nt">--group</span> <span class="nt">--disabled-password</span> <span class="se">\</span>
<span class="go">        --shell /bin/false --gecos "Kamailio" \
        --home /var/run/kamailio kamailio

</span><span class="gp">$</span><span class="w"> </span><span class="nb">sudo chown </span>kamailio:kamailio /var/run/kamailio
</code></pre></div></div> <p>Then you can start Kamailio using the following commands:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl start kamailio.service
</code></pre></div></div> <p>If you have done everything right, you may get an output like this if you get a status:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl status kamailio.service
<span class="go">● kamailio.service - LSB: Start the Kamailio SIP proxy server
</span><span class="gp">   Loaded: loaded (/etc/init.d/kamailio;</span><span class="w"> </span>generated<span class="o">)</span>
<span class="gp">   Active: active (running) since Tue 2023-03-14 00:10:23 +0330;</span><span class="w"> </span>5s ago
<span class="go">     Docs: man:systemd-sysv-generator(8)
  Process: 6670 ExecStart=/etc/init.d/kamailio start (code=exited, status=0/SUCCESS)
    Tasks: 24 (limit: 4915)
   CGroup: /system.slice/kamailio.service
           ├─6689 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6690 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6691 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6692 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6693 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6694 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6695 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6696 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6697 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6698 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6699 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6700 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6701 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6702 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6703 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6704 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6705 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6706 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6707 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6708 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6709 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6710 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           ├─6711 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
           └─6712 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio

مارس 14 00:10:23 5gl kamailio[6670]:              *: ims.mnc001.mcc001.3gppnetwork.org:*
مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6689]: INFO: rr [../outbound/api.h:52]: ob_load_api(): unable to import bind_ob - maybe module is not loaded
مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6689]: INFO: rr [rr_mod.c:177]: mod_init(): outbound module not available
</span><span class="gp">مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6689]: INFO: &lt;core&gt;</span><span class="w"> </span><span class="o">[</span>main.c:2779]: main<span class="o">()</span>: processes <span class="o">(</span>at least<span class="o">)</span>: 24 - shm size: 67108864 - pkg size: 8388608
<span class="gp">مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6689]: INFO: &lt;core&gt;</span><span class="w"> </span><span class="o">[</span>core/udp_server.c:154]: probe_max_receive_buffer<span class="o">()</span>: SO_RCVBUF is initially 212992
<span class="gp">مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6689]: INFO: &lt;core&gt;</span><span class="w"> </span><span class="o">[</span>core/udp_server.c:206]: probe_max_receive_buffer<span class="o">()</span>: SO_RCVBUF is finally 425984
<span class="go">مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6702]: INFO: jsonrpcs [jsonrpcs_sock.c:443]: jsonrpc_dgram_process(): a new child 0/6702
مارس 14 00:10:23 5gl /usr/local/sbin/kamailio[6703]: INFO: ctl [io_listener.c:214]: io_listen_loop(): io_listen_loop:  using epoll_lt io watch method (config)
مارس 14 00:10:23 5gl kamailio[6670]:    ...done.
مارس 14 00:10:23 5gl systemd[1]: Started LSB: Start the Kamailio SIP proxy server.

</span></code></pre></div></div> <p>You can also check everything is right with the following command:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ps axw | egrep kamailio
<span class="go"> 6689 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6690 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6691 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6692 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6693 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6694 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6695 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6696 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6697 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6698 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6699 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6700 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6701 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6702 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6703 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6704 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6705 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6706 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6707 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6708 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6709 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6710 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6711 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6712 ?        S      0:00 /usr/local/sbin/kamailio -f /usr/local/etc/kamailio/kamailio.cfg -P /var/run/kamailio/kamailio.pid -m 64 -M 8 -u kamailio -g kamailio
 6852 pts/2    S+     0:00 grep -E --color=auto kamailio
</span></code></pre></div></div> <h2 id="create-new-mysql-database-for-pcscf-scscf-and-icscf-populate-databases-and-grant-permissions-to-respective-users-identified-by-a-password"><strong>Create new mysql database for pcscf, scscf and icscf, populate databases and grant permissions to respective users identified by a password</strong></h2> <p>First, do the steps bellow in mysql environment:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql
<span class="gp">mysql&gt;</span><span class="w"> </span>CREATE DATABASE  <span class="sb">`</span>pcscf<span class="sb">`</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span>CREATE DATABASE  <span class="sb">`</span>scscf<span class="sb">`</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span>CREATE DATABASE  <span class="sb">`</span>icscf<span class="sb">`</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span><span class="nb">exit</span>
</code></pre></div></div> <p>In all of the below steps, when prompted for mysql root user password, <strong>leave it blank</strong> i.e. <strong>Press Enter</strong>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /usr/local/src/kamailio/utils/kamctl/mysql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> pcscf &lt; standard-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> pcscf &lt; presence-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> pcscf &lt; ims_usrloc_pcscf-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> pcscf &lt; ims_dialog-create.sql
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> scscf &lt; standard-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> scscf &lt; presence-create.sql
<span class="gp">$</span><span class="w"> </span>sudomysql <span class="nt">-u</span> root <span class="nt">-p</span> scscf &lt; ims_usrloc_scscf-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> scscf &lt; ims_dialog-create.sql
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> scscf &lt; ims_charging-create.sql
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /usr/local/src/kamailio/misc/examples/ims/icscf
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql <span class="nt">-u</span> root <span class="nt">-p</span> icscf &lt; icscf.sql
</code></pre></div></div> <p>You can Verify that following tables are present in respective databases (for example for pcscf) by logging into mysql.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql
<span class="gp">mysql&gt;</span><span class="w"> </span>show databases<span class="p">;</span>
<span class="go">+--------------------+
| Database           |
+--------------------+
| information_schema |
| icscf              |
| kamailio           |
| mysql              |
| pcscf              |
| performance_schema |
| scscf              |
| sys                |
+--------------------+
8 rows in set (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>use pcscf<span class="p">;</span>
<span class="go">Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
</span><span class="gp">mysql&gt;</span><span class="w"> </span>show tables<span class="p">;</span>
<span class="go">+-----------------+
| Tables_in_pcscf |
+-----------------+
| active_watchers |
| dialog_in       |
| dialog_out      |
| dialog_vars     |
| location        |
| presentity      |
| pua             |
| version         |
| watchers        |
| xcap            |
+-----------------+
10 rows in set (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span><span class="nb">exit</span>
<span class="go">Bye
</span></code></pre></div></div> <p>You can do the same for other databses (icscf and scscf) as above (better to check if everything is alright) . Then, repeat following steps:</p> <p>NOTE: Do not copy/paste Query OK, 0 rows affected, 1 warning (0.00 sec) !!!</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql
<span class="gp">mysql&gt;</span><span class="w"> </span>grant delete,insert,select,update on pcscf.<span class="k">*</span> to pcscf@localhost identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec) (you should get back this if everything is ok)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>grant delete,insert,select,update on scscf.<span class="k">*</span> to scscf@localhost identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>grant delete,insert,select,update on icscf.<span class="k">*</span> to icscf@localhost identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>grant delete,insert,select,update on icscf.<span class="k">*</span> to provisioning@localhost identified by <span class="s1">'provi'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>GRANT ALL PRIVILEGES ON pcscf.<span class="k">*</span> TO <span class="s1">'pcscf'</span>@<span class="s1">'%'</span> identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>GRANT ALL PRIVILEGES ON scscf.<span class="k">*</span> TO <span class="s1">'scscf'</span>@<span class="s1">'%'</span> identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>GRANT ALL PRIVILEGES ON icscf.<span class="k">*</span> TO <span class="s1">'icscf'</span>@<span class="s1">'%'</span> identified by <span class="s1">'heslo'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.01 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>GRANT ALL PRIVILEGES ON icscf.<span class="k">*</span> TO <span class="s1">'provisioning'</span>@<span class="s1">'%'</span> identified by <span class="s1">'provi'</span><span class="p">;</span>
<span class="go">Query OK, 0 rows affected, 1 warning (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span>FLUSH PRIVILEGES<span class="p">;</span>
<span class="go">Query OK, 0 rows affected (0.00 sec)
</span><span class="gp">mysql&gt;</span><span class="w"> </span><span class="nb">exit</span>
<span class="go">Bye
</span></code></pre></div></div> <p>Then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>mysql
<span class="gp">mysql&gt;</span><span class="w"> </span>use icscf<span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span>INSERT INTO <span class="sb">`</span>nds_trusted_domains<span class="sb">`</span> VALUES <span class="o">(</span>1,<span class="s1">'ims.mnc001.mcc001.3gppnetwork.org'</span><span class="o">)</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span>INSERT INTO <span class="sb">`</span>s_cscf<span class="sb">`</span> VALUES <span class="o">(</span>1,<span class="s1">'First and only S-CSCF'</span>,<span class="s1">'sip:scscf.ims.mnc001.mcc001.3gppnetwork.org:6060'</span><span class="o">)</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span>INSERT INTO <span class="sb">`</span>s_cscf_capabilities<span class="sb">`</span> VALUES <span class="o">(</span>1,1,0<span class="o">)</span>,<span class="o">(</span>2,1,1<span class="o">)</span><span class="p">;</span>
<span class="gp">mysql&gt;</span><span class="w"> </span><span class="nb">exit</span>
</code></pre></div></div> <h2 id="copy-pcscf-icscf-and-scscf-configuration-files-to-etc-folder-and-edit-accordingly"><strong>Copy pcscf, icscf and scscf configuration files to</strong> /etc <strong>folder and edit accordingly</strong></h2> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~ <span class="o">&amp;&amp;</span> git clone https://github.com/herlesupreeth/Kamailio_IMS_Config
<span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>Kamailio_IMS_Config
<span class="gp">$</span><span class="w"> </span><span class="nb">cp</span> <span class="nt">-r</span> kamailio_icscf /etc
<span class="gp">$</span><span class="w"> </span><span class="nb">cp</span> <span class="nt">-r</span> kamailio_pcscf /etc
<span class="gp">$</span><span class="w"> </span><span class="nb">cp</span> <span class="nt">-r</span> kamailio_scscf /etc
</code></pre></div></div> <h2 id="setup-the-dns-for-resolving-ims-and-epc-components-names"><strong>Setup the DNS for resolving IMS and EPC components names</strong></h2> <p>First:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> bind9
</code></pre></div></div> <p>Then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /etc/bind
</code></pre></div></div> <p>Then create an new file with:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano ims.mnc001.mcc001.3gppnetwork.org
</code></pre></div></div> <p>Copy/paste content in bellow box and save the file:</p> <hr/> <p><strong>NOTE</strong></p> <p>Change the all the <strong>172.30.75.103</strong> IPs to your local (Private) IP!</p> <hr/> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span>ORIGIN ims.mnc001.mcc001.3gppnetwork.org.
<span class="gp">$</span>TTL 1W
<span class="go">@                       1D IN SOA       localhost. root.localhost. (
</span><span class="gp">                                        1               ;</span><span class="w"> </span>serial
<span class="gp">                                        3H              ;</span><span class="w"> </span>refresh
<span class="gp">                                        15M             ;</span><span class="w"> </span>retry
<span class="gp">                                        1W              ;</span><span class="w"> </span>expiry
<span class="gp">                                        1D )            ;</span><span class="w"> </span>minimum
<span class="go">
                        1D IN NS        ns
ns                      1D IN A         172.30.75.103

pcscf                   1D IN A         172.30.75.103
_sip._udp.pcscf         1D SRV 0 0 5060 pcscf
_sip._tcp.pcscf         1D SRV 0 0 5060 pcscf

icscf                   1D IN A         172.30.75.103
_sip._udp               1D SRV 0 0 4060 icscf
_sip._tcp               1D SRV 0 0 4060 icscf

scscf                   1D IN A         172.30.75.103
_sip._udp.scscf         1D SRV 0 0 6060 scscf
_sip._tcp.scscf         1D SRV 0 0 6060 scscf

hss                     1D IN A         172.30.75.103

</span></code></pre></div></div> <hr/> <p><strong>NOTE</strong></p> <p>Above example DNS Zone file creates a DNS Zone file into the bind folder.</p> <hr/> <p>We will create another DNS zone for resolving pcrf domain as follows:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /etc/bind
</code></pre></div></div> <p>Then create an new file with:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nano epc.mnc001.mcc001.3gppnetwork.org
</code></pre></div></div> <p>Copy/paste content in bellow box and save the file:</p> <hr/> <p><strong>NOTE</strong></p> <p>Change the all the <strong>172.30.75.103</strong> IPs to your local (Private) IP!</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ORIGIN epc.mnc001.mcc001.3gppnetwork.org.
$TTL 1W
@                       1D IN SOA       localhost. root.localhost. (
                                        1               ; serial
                                        3H              ; refresh
                                        15M             ; retry
                                        1W              ; expiry
                                        1D )            ; minimum

                        1D IN NS        epcns
epcns                   1D IN A         172.30.75.103

pcrf                    1D IN A         127.0.0.5
</code></pre></div></div> <hr/> <p><strong>NOTE</strong></p> <p>Also note that according to this DNS zone file, <a href="https://en.wikipedia.org/wiki/Policy_and_charging_rules_function">PCRF</a> (a component in open5gs project) must have IP address of 127.0.0.5! (we later config it that way)</p> <hr/> <p>Then edit <strong>/etc/bind/named.conf.local</strong> file as follows (the whole content of the file should be as follows):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//
// Do any local configuration here
//

// Consider adding the 1918 zones here, if they are not used in your
// organization
//include "/etc/bind/zones.rfc1918";

zone "ims.mnc001.mcc001.3gppnetwork.org" {
        type master;
        file "/etc/bind/ims.mnc001.mcc001.3gppnetwork.org";
};

zone "epc.mnc001.mcc001.3gppnetwork.org" {
        type master;
        file "/etc/bind/epc.mnc001.mcc001.3gppnetwork.org";
};
</code></pre></div></div> <p>And finally edit <strong>/etc/bind/named.conf.options</strong> file as follows (the whole content of the file should be as follows):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>options {
        directory "/var/cache/bind";

        // If there is a firewall between you and nameservers you want
        // to talk to, you may need to fix the firewall to allow multiple
        // ports to talk.  See http://www.kb.cert.org/vuls/id/800113

        // If your ISP provided one or more IP addresses for stable
        // nameservers, you probably want to use them as forwarders.
        // Uncomment the following block, and insert the addresses replacing
        // the all-0's placeholder.

        //forwarders {
        // Put here the IP address of other DNS server which could be used if name cannot be resolved with DNS server running in this machine (Optional)
        //10.4.128.2;
        //};

        //========================================================================
        // If BIND logs error messages about the root key being expired,
        // you will need to update your keys.  See https://www.isc.org/bind-keys
        //========================================================================
        dnssec-validation no;
        allow-query { any; };

        auth-nxdomain no;    # conform to RFC1035
        //listen-on-v6 { any; };
};
</code></pre></div></div> <p>Now go to your connection setting and turn off Automatic DNS setting and just fill it with your Private IP (for my case is 172.30.75.103).</p> <hr/> <p><strong>NOTE</strong></p> <p>Don’t forget to change 172.30.75.103 to your Private IP.</p> <hr/> <p><img src="https://raw.githubusercontent.com/ryantheelder/open5gs_kamailio/main/images/image.png" alt="alt text"/></p> <p>Then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl restart bind9
</code></pre></div></div> <p>Add following entries on <em>top of all other entries</em> in <strong>/etc/resolv.conf</strong> (make sure it persist across reboots (Google how!)):</p> <hr/> <p><strong>NOTE</strong></p> <p>make sure to change 172.30.75.103 IP to your Private IP!</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>search ims.mnc001.mcc001.3gppnetwork.org
nameserver 172.30.75.103
</code></pre></div></div> <p>Finally, do the following step to make sure if dns is working:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nslookup pcscf.ims.mnc001.mcc001.3gppnetwork.org
</code></pre></div></div> <p>you should get a result like this (except that your Private IP is defferent):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nslookup pcscf.ims.mnc001.mcc001.3gppnetwork.org
<span class="go">Server:         172.30.75.103
</span><span class="gp">Address:        172.30.75.103#</span>53
<span class="go">
Name:   pcscf.ims.mnc001.mcc001.3gppnetwork.org
Address: 172.30.75.103
</span></code></pre></div></div> <h2 id="install-rtpengine"><strong>Install RTPEngine</strong></h2> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">export </span><span class="nv">DEB_BUILD_PROFILES</span><span class="o">=</span><span class="s2">"pkg.ngcp-rtpengine.nobcg729"</span>
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install </span>dpkg-dev
<span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~
<span class="gp">$</span><span class="w"> </span>git clone https://github.com/sipwise/rtpengine
<span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>rtpengine <span class="o">&amp;&amp;</span> git checkout mr7.4.1
</code></pre></div></div> <p>Then:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ dpkg-checkbuilddeps
</code></pre></div></div> <p>The above command checks for dependencies and give you a list of dependencies which are missing in the system. The below list is the result of this command and we will install them:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">sudo apt install debhelper default-libmysqlclient-dev gperf iptables-dev libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev libbencode-perl libcrypt-openssl-rsa-perl libcrypt-rijndael-perl libdigest-crc-perl libdigest-hmac-perl libevent-dev libhiredis-dev libio-multiplex-perl libio-socket-inet6-perl libiptc-dev libjson-glib-dev libnet-interface-perl libpcap0.8-dev libsocket6-perl libspandsp-dev libswresample-dev libsystemd-dev libxmlrpc-core-c3-dev markdown dkms module-assistant keyutils libnfsidmap2 libtirpc1 nfs-common rpcbind
</span></code></pre></div></div> <p>After installing dependencies run the below command again and verify that no dependencies are left out. This should just return back to shell with no output if all depedencies are met.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>dpkg-checkbuilddeps
<span class="gp">$</span><span class="w">
</span></code></pre></div></div> <p>Then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>dpkg-buildpackage <span class="nt">-uc</span> <span class="nt">-us</span>
</code></pre></div></div> <p>successful build end like tios:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>dpkg-buildpackage <span class="nt">-uc</span> <span class="nt">-us</span>
<span class="c">.
.
.
</span><span class="go">dpkg-source: info: using options from rtpengine/debian/source/options: --extend-diff-ignore=.gitreview
</span><span class="gp">dpkg-buildpackage: info: full upload;</span><span class="w"> </span>Debian-native package <span class="o">(</span>full <span class="nb">source </span>is included<span class="o">)</span>
</code></pre></div></div> <p>then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ..
</code></pre></div></div> <p>and:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> <span class="k">*</span>.deb
</code></pre></div></div> <p>Successful installation ends with like this:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> <span class="k">*</span>.deb
<span class="c">.
.
.
</span><span class="go">Setting up ngcp-rtpengine-kernel-source (7.4.1.7+0~mr7.4.1.7) ...
Setting up ngcp-rtpengine-recording-daemon (7.4.1.7+0~mr7.4.1.7) ...
Setting up ngcp-rtpengine-utils (7.4.1.7+0~mr7.4.1.7) ...
Setting up ngcp-rtpengine (7.4.1.7+0~mr7.4.1.7) ...
Processing triggers for systemd (237-3ubuntu10.57) ...
Processing triggers for ureadahead (0.100.0-21) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
</span><span class="gp">$</span><span class="w">
</span></code></pre></div></div> <p>Then, run:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo cp</span> /etc/rtpengine/rtpengine.sample.conf /etc/rtpengine/rtpengine.conf
</code></pre></div></div> <p>Then open the config file located at: <strong>/etc/rtpengine/rtpengine.conf</strong>. Edit this file as follows under [rtpengine] section:</p> <hr/> <p><strong>NOTE</strong></p> <p>Don’t forget to change 172.30.75.103 to your Private IP.</p> <hr/> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface = 172.30.75.103
</code></pre></div></div> <p>Then open /etc/default/ngcp-rtpengine-daemon config file and edit the following line to be yes:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RUN_RTPENGINE=yes
</code></pre></div></div> <p>Also edit /etc/default/ngcp-rtpengine-recording-daemon config file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RUN_RTPENGINE_RECORDING=yes
</code></pre></div></div> <p>Finally:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo cp</span> /etc/rtpengine/rtpengine-recording.sample.conf /etc/rtpengine/rtpengine-recording.conf
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo mkdir</span> /var/spool/rtpengine
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl restart ngcp-rtpengine-daemon.service ngcp-rtpengine-recording-daemon.service ngcp-rtpengine-recording-nfs-mount.service
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>ngcp-rtpengine-daemon.service ngcp-rtpengine-recording-daemon.service ngcp-rtpengine-recording-nfs-mount.service
<span class="gp">$</span><span class="w"> </span>systemctl stop rtpproxy
<span class="gp">$</span><span class="w"> </span>systemctl disable rtpproxy
<span class="gp">$</span><span class="w"> </span>systemctl mask rtpproxy
</code></pre></div></div> <h2 id="running-i-cscf-p-cscf-and-s-cscf-as-separate-process"><strong>Running I-CSCF, P-CSCF and S-CSCF as separate process</strong></h2> <p>First, stop the default kamailio SIP server:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl stop kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl disable kamailio
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl mask kamailio
</code></pre></div></div> <p>There are some chnages that you shoul make that original document from <a href="https://open5gs.org/open5gs/docs/tutorial/02-VoLTE-setup/">open5gs</a> hasn’t mentioned them.</p> <hr/> <p><strong>NOTE</strong></p> <p><strong>In order to make everything work, YOU **MUST</strong> do following steps in a correct way.**</p> <hr/> <ol> <li>Changes in PCSCF: <ul> <li>Open /etc/kamailio_pcscf location with root access. one way to do so is: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nautilus /etc/kamailio_pcscf
</code></pre></div> </div> </li> <li>You can see several config files: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> /etc/kamailio_pcscf/
<span class="go">dispatcher.list  kamailio_pcscf.cfg  pcscf.cfg  pcscf.xml  README.md  route  sems  tls.cfg
</span></code></pre></div> </div> </li> <li>Open <strong>pcscf.cfg</strong> and <strong>pcscf.xml</strong> files and replace all 10.4.128.21 to your <strong>Private IP</strong> (which in my case is 172.30.75.103)</li> </ul> </li> <li>Changes in SCSCF: <ul> <li>Open /etc/kamailio_scscf location with root access. one way to do so is: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nautilus /etc/kamailio_scscf
</code></pre></div> </div> </li> <li>Open <strong>scscf.cfg</strong> and <strong>scscf.xml</strong> files and replace all 10.4.128.21 to your <strong>Private IP</strong> (which in my case is 172.30.75.103)</li> </ul> </li> <li>Changes in ICSCF: <ul> <li>Open /etc/kamailio_icscf location with root access. one way to do so is: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>nautilus /etc/kamailio_icscf
</code></pre></div> </div> </li> <li>Open <strong>icscf.cfg</strong> and <strong>icscf.xml</strong> files and replace all 10.4.128.21 to your <strong>Private IP</strong> (which in my case is 172.30.75.103)</li> </ul> </li> </ol> <p>From now on you should be able to have multiple terminals open. To handle everything easily. I recommand <a href="https://github.com/tmux/tmux/wiki">Tmux</a>.</p> <h3 id="lets-run-kamailio-stuff"><strong>Let’s run kamailio stuff</strong></h3> <ol> <li>Running PCSCF: <ul> <li>Open a terminal</li> <li>Then: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp"> $</span><span class="w"> </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="gp"> #</span><span class="w"> </span><span class="nb">mkdir</span> <span class="nt">-p</span> /var/run/kamailio_pcscf
</code></pre></div> </div> <hr/> <p><strong>NOTE</strong></p> </li> </ul> <p>You have to repeat step above everytime you restart your computer in order to run pcscf as bellow * Finally run pcscf as separate process:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">  #</span><span class="w"> </span>kamailio <span class="nt">-f</span> /etc/kamailio_pcscf/kamailio_pcscf.cfg <span class="nt">-P</span> /kamailio_pcscf.pid <span class="nt">-DD</span> <span class="nt">-E</span> <span class="nt">-e</span> 
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   * *For now*, a successful running of PCSCF should iclude some lines like this:   ``` console   # kamailio -f /etc/kamailio_pcscf/kamailio_pcscf.cfg -P /kamailio_pcscf.pid -DD -E -e  . . . 0(4551) ERROR: &lt;script&gt;: event_route[htable:mod-init] . .   . . 96(6589) INFO: cdp [peerstatemachine.c:526]: I_Snd_Conn_Req(): I_Snd_Conn_Req(): Peer pcrf.epc.mnc001.mcc001.3gppnetwork.org  96(6589) INFO: cdp [receiver.c:874]: peer_connect(): peer_connect(): Trying to connect to 127.0.0.5 port 3868 96(6589) ERROR: cdp [receiver.c:922]: peer_connect(): peer_connect(): Error opening connection to to 127.0.0.5 port 3868 &gt;Connection refused 95(6587) INFO: cdp [acceptor.c:81]: acceptor_process(): Acceptor process starting up... 95(6587) WARNING: cdp [tcp_accept.c:120]: create_socket(): create_socket(): Trying to open/bind/listen on 172.30.75.103 port 3871 95(6587) WARNING: cdp [tcp_accept.c:145]: create_socket(): create_socket(): Successful socket open/bind/listen on 172.30.75.103 port 3871 . . . . 98(4761) ERROR: &lt;script&gt;: Preloading NAT-PING. Rows: 0 . . .     ```
   * In order to make VoLTE work, This process should be running. But whenever wanted to close   the process you can hit ctrl + c :   ```console   # kamailio -f /etc/kamailio_pcscf/kamailio_pcscf.cfg -P /kamailio_pcscf.pid -DD -E -e   .   .   .   ^C   #   ```
</code></pre></div> </div> </li> <li>Running SCSCF: <ul> <li>Open a terminal</li> <li>Then: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp"> $</span><span class="w"> </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="gp"> #</span><span class="w"> </span><span class="nb">mkdir</span> <span class="nt">-p</span> /var/run/kamailio_scscf
</code></pre></div> </div> <hr/> <p><strong>NOTE</strong></p> </li> </ul> <p>You have to repeat step above everytime you restart your computer in order to run pcscf as bellow * Finally run pcscf as separate process:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">  #</span><span class="w"> </span>kamailio <span class="nt">-f</span> /etc/kamailio_scscf/kamailio_scscf.cfg <span class="nt">-P</span> /kamailio_scscf.pid <span class="nt">-DD</span> <span class="nt">-E</span> <span class="nt">-e</span> 
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   * *For now*, a successful running of SCSCF should iclude some lines like this:  ```console   # kamailio -f /etc/kamailio_scscf/kamailio_scscf.cfg -P /kamailio_scscf.pid -DD -E -e   .   .   .   19(6702) INFO: cdp [worker.c:332]: worker_process(): [10] Worker process started...   26(6719) INFO: cdp [receiver.c:454]: receiver_process(): receiver_process(): [hss.ims.mnc001.mcc001.3gppnetwork.org] Receiver process doing init on new process...   26(6719) INFO: cdp [receiver.c:186]: add_serviced_peer(): add_serviced_peer(): Adding serviced_peer_t to receiver for peer [hss.ims.mnc001.mcc001.3gppnetwork.org]   26(6719) INFO: cdp [receiver.c:459]: receiver_process(): receiver_process(): [hss.ims.mnc001.mcc001.3gppnetwork.org] Receiver process starting up...   27(6722) INFO: cdp [acceptor.c:81]: acceptor_process(): Acceptor process starting up...   27(6722) WARNING: cdp [tcp_accept.c:120]: create_socket(): create_socket(): Trying to open/bind/listen on 172.30.75.103 port 3870   27(6722) WARNING: cdp [tcp_accept.c:145]: create_socket(): create_socket(): Successful socket open/bind/listen on 172.30.75.103 port 3870   27(6722) INFO: cdp [acceptor.c:95]: acceptor_process(): Acceptor opened sockets. Entering accept loop ...   28(6723) INFO: cdp [peerstatemachine.c:526]: I_Snd_Conn_Req(): I_Snd_Conn_Req(): Peer hss.ims.mnc001.mcc001.3gppnetwork.org    28(6723) INFO: cdp [receiver.c:874]: peer_connect(): peer_connect(): Trying to connect to 172.30.75.103 port 3868   28(6723) ERROR: cdp [receiver.c:922]: peer_connect(): peer_connect(): Error opening connection to to 172.30.75.103 port 3868 &gt;Connection refused   .   .   .
</code></pre></div> </div> </li> </ol> <p>#</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  
  
  
  
  
* In order to make VoLTE work, This process should be running. But whenever wanted to close
  the process you can hit ctrl + c :
  ``` console
  # kamailio -f /etc/kamailio_scscf/kamailio_scscf.cfg -P /kamailio_scscf.pid -DD -E -e 
   .
   .
   .
   ^C
  #
</code></pre></div></div> <ol> <li>Running ICSCF: <ul> <li>Open a terminal</li> <li>Then: <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp"> $</span><span class="w"> </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="gp"> #</span><span class="w"> </span><span class="nb">mkdir</span> <span class="nt">-p</span> /var/run/kamailio_icscf
</code></pre></div> </div> <hr/> <p><strong>NOTE</strong></p> </li> </ul> <p>You have to repeat step above everytime you restart your computer in order to run pcscf as bellow * Finally run pcscf as separate process:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">  #</span><span class="w"> </span>kamailio <span class="nt">-f</span> /etc/kamailio_icscf/kamailio_icscf.cfg <span class="nt">-P</span> /kamailio_icscf.pid <span class="nt">-DD</span> <span class="nt">-E</span> <span class="nt">-e</span> 
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   * *For now*, a successful running of ICSCF should iclude some lines like this:  ```console   # kamailio -f /etc/kamailio_icscf/kamailio_icscf.cfg -P /kamailio_icscf.pid -DD -E -e   .   .   .   26(6946) INFO: cdp [receiver.c:459]: receiver_process(): receiver_process(): [hss.ims.mnc001.mcc001.3gppnetwork.org] Receiver process starting up...   27(6947) INFO: cdp [acceptor.c:81]: acceptor_process(): Acceptor process starting up...   27(6947) WARNING: cdp [tcp_accept.c:120]: create_socket(): create_socket(): Trying to open/bind/listen on 172.30.75.103 port 3869   28(6948) INFO: cdp [timer.c:205]: timer_process(): Timer process starting up...   27(6947) WARNING: cdp [tcp_accept.c:145]: create_socket(): create_socket(): Successful socket open/bind/listen on 172.30.75.103 port 3869   27(6947) INFO: cdp [acceptor.c:95]: acceptor_process(): Acceptor opened sockets. Entering accept loop ...   30(6950) INFO: jsonrpcs [jsonrpcs_sock.c:443]: jsonrpc_dgram_process(): a new child 0/6950   28(6948) INFO: cdp [peerstatemachine.c:526]: I_Snd_Conn_Req(): I_Snd_Conn_Req(): Peer hss.ims.mnc001.mcc001.3gppnetwork.org    28(6948) INFO: cdp [receiver.c:874]: peer_connect(): peer_connect(): Trying to connect to 172.30.75.103 port 3868   28(6948) ERROR: cdp [receiver.c:922]: peer_connect(): peer_connect(): Error opening connection to to 172.30.75.103 port 3868 &gt;Connection refused   .   .   .   #   ```
   * In order to make VoLTE work, This process should be running. But whenever wanted to close   the process you can hit ctrl + c :   ``` console   # kamailio -f /etc/kamailio_scscf/kamailio_scscf.cfg -P /kamailio_scscf.pid -DD -E -e  . . . ^C   #   ```
</code></pre></div> </div> </li> </ol> <h2 id="install-open5gs-in-the-same-machine-as-kamailio-ims---install-open5gs-from-source"><strong>Install Open5GS in the same machine as Kamailio IMS - Install Open5GS from source</strong></h2> <h3 id="getting-mongodb"><strong>Getting MongoDB</strong></h3> <p>Import the public key used by the package management system.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>wget <span class="nt">-qO</span> - https://www.mongodb.org/static/pgp/server-6.0.asc | <span class="nb">sudo </span>apt-key add -
<span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/6.0 multiverse"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/mongodb-org-6.0.list
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt-get update
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> mongodb-org
</code></pre></div></div> <p>Then:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl start mongod
</code></pre></div></div> <p>And then (ensure to automatically start it on system boot–&gt; Google how!):</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>mongod
</code></pre></div></div> <h3 id="setting-up-tun-device-not-persistent-after-rebooting"><strong>Setting up TUN device (not persistent after rebooting)</strong></h3> <p>Create the TUN device with the interface name <strong>ogstun3</strong>:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ip tuntap add name ogstun mode tun
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ip addr add 10.45.0.1/16 dev ogstun
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ip addr add 2001:db8:cafe::1/48 dev ogstun
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ip <span class="nb">link set </span>ogstun up
</code></pre></div></div> <h3 id="building-open5gs"><strong>Building Open5GS</strong></h3> <p>Install the dependencies for building the source code:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install </span>python3-pip python3-setuptools python3-wheel ninja-build build-essential flex bison git cmake libsctp-dev libgnutls28-dev libgcrypt-dev libssl-dev libidn11-dev libmongoc-dev libbson-dev libyaml-dev libnghttp2-dev libmicrohttpd-dev libcurl4-gnutls-dev libnghttp2-dev libtins-dev libtalloc-dev meson
</code></pre></div></div> <p>Then clone the repo. :</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~
<span class="gp">$</span><span class="w"> </span>git clone https://github.com/open5gs/open5gs
</code></pre></div></div> <p>To compile with meson:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>open5gs
<span class="gp">$</span><span class="w"> </span>meson build <span class="nt">--prefix</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/install
<span class="gp">$</span><span class="w"> </span>ninja <span class="nt">-C</span> build
</code></pre></div></div> <p>Check whether the compilation is correct:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~/open5gs
<span class="gp">$</span><span class="w"> </span>./build/tests/attach/attach <span class="c">## EPC Only</span>
<span class="gp">$</span><span class="w"> </span>./build/tests/registration/registration <span class="c">## 5G Core Only</span>
</code></pre></div></div> <p>Run all test</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~/open5gs/build
<span class="gp">$</span><span class="w"> </span>meson <span class="nb">test</span> <span class="nt">-v</span>
</code></pre></div></div> <p>You need to perform the installation process.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> ~/open5gs/build
<span class="gp">$</span><span class="w"> </span>ninja <span class="nb">install</span>
</code></pre></div></div> <h3 id="install-and-setup-fohss">Install and Setup FoHSS</h3> <h4 id="install-java-jdk">install Java JDK</h4> <p>Download Oracle Java 7 JDK from following link using a browser:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html
</code></pre></div></div> <p>Change directory to wherever you have downloaded the file.</p> <p>Downloaded file name should be: <code class="language-plaintext highlighter-rouge">jdk-7u79-linux-x64.tar.gz</code></p> <p>NOTE: use <code class="language-plaintext highlighter-rouge">sudo</code> wherever needed:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir -p  /usr/lib/jvm/
path-to-downloaded file$ tar -zxf jdk-7u79-linux-x64.tar.gz -C /usr/lib/jvm/
</code></pre></div></div> <p>Now:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_79/bin/java 100
$ update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_79/bin/javac 100
</code></pre></div></div> <p>Configure Java version:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ update-alternatives --display java
java - auto mode
  link best version is /usr/lib/jvm/jdk1.7.0_79/bin/java
  link currently points to /usr/lib/jvm/jdk1.7.0_79/bin/java
  link java is /usr/bin/java
/usr/lib/jvm/jdk1.7.0_79/bin/java - priority 100

$ update-alternatives --display javac
javac - auto mode
  link best version is /usr/lib/jvm/jdk1.7.0_79/bin/javac
  link currently points to /usr/lib/jvm/jdk1.7.0_79/bin/javac
  link javac is /usr/bin/javac
/usr/lib/jvm/jdk1.7.0_79/bin/javac - priority 100
</code></pre></div></div> <p>Now run the fullowing command and select <code class="language-plaintext highlighter-rouge">java version "1.7.0_79"</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ update-alternatives --config java
$ update-alternatives --config javac
</code></pre></div></div> <p>Check if java version is ok:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ java -version
java version "1.7.0_79"
Java(TM) SE Runtime Environment (build 1.7.0_79-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)
</code></pre></div></div> <h3 id="install-ant">Install Ant</h3> <p>Now we want to download file, change directory to wherever you want to, in following we simply download to <code class="language-plaintext highlighter-rouge">~</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ~
$ wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.14-bin.tar.gz
$ tar xvfvz apache-ant-1.9.14-bin.tar.gz
$ mv apache-ant-1.9.14 /usr/local/
$ sh -c 'echo ANT_HOME=/usr/local/  &gt;&gt; /etc/environment'
$ ln -s /usr/local/apache-ant-1.9.14/bin/ant /usr/bin/ant
</code></pre></div></div> <p>Verfiy ant version as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ant -version
Apache Ant(TM) version 1.9.14 compiled on March 12 2019
</code></pre></div></div> <p>If the above command ended as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ant -version
Error: Could not find or load main class org.apache.tools.ant.launch.Launcher
Caused by: java.lang.ClassNotFoundException: org.apache.tools.ant.launch.Launcher
</code></pre></div></div> <p>Then:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export ANT_HOME=/usr/local/apache-ant-1.9.14
</code></pre></div></div> <p>Now it should be working:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ant -version
Apache Ant(TM) version 1.9.14 compiled on March 12 2019
</code></pre></div></div> <h3 id="installing-fhoss">installing FHoSS</h3> <p>Create working directories for OpenIMSCore:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir /opt/OpenIMSCore
$ cd /opt/OpenIMSCore
</code></pre></div></div> <p>Download FHoSS source code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore$ git clone https://github.com/herlesupreeth/FHoSS

</code></pre></div></div> <p>Compile:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore$ cd FHoSS
/opt/OpenIMSCore/FHoSS$ export JAVA_HOME="/usr/lib/jvm/jdk1.7.0_79"
/opt/OpenIMSCore/FHoSS$ export CLASSPATH="/usr/lib/jvm/jdk1.7.0_79/jre/lib/"
/opt/OpenIMSCore/FHoSS$ ant compile deploy | tee ant_compile_deploy.txt
</code></pre></div></div> <p>Create configurator.sh using below script to change domain names and IP address in all configuration files:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS$ cd deploy
</code></pre></div></div> <p>in directory <code class="language-plaintext highlighter-rouge">/opt/OpenIMSCore/FHoSS/deploy</code>, make <code class="language-plaintext highlighter-rouge">configurator.sh</code> file and copy paste the follwing content to it.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# Initialization &amp; global vars
# if you execute this script for the second time
# you should change these variables to the latest
# domain name and ip address
DDOMAIN="open-ims\.test"
DSDOMAIN="open-ims\\\.test"
DEFAULTIP="127\.0\.0\.1"
CONFFILES=`ls *.cfg *.xml *.sql *.properties 2&gt;/dev/null`

# Interaction
printf "Domain Name:"
read domainname 
printf "IP Adress:"
read ip_address

# input domain is to be slashed for cfg regexes 
slasheddomain=`echo $domainname | sed 's/\./\\\\\\\\\./g'`

  if [ $# != 0 ] 
  then 
  printf "changing: "
      for j in $* 
      do
    sed -i -e "s/$DDOMAIN/$domainname/g" $j
    sed -i -e "s/$DSDOMAIN/$slasheddomain/g" $j
    sed -i -e "s/$DEFAULTIP/$ip_address/g" $j
    printf "$j " 
      done
  echo 
  else 
  printf "File to change [\"all\" for everything, \"exit\" to quit]:"
  # loop
      while read filename ;
      do
        if [ "$filename" = "exit" ] 
        then 
        printf "exitting...\n"
        break ;

      elif [ "$filename" = "all" ]
      then    
          printf "changing: "
         for i in $CONFFILES 
         do
        sed -i -e "s/$DDOMAIN/$domainname/g" $i
        sed -i -e "s/$DSDOMAIN/$slasheddomain/g" $i
        sed -i -e "s/$DEFAULTIP/$ip_address/g" $i
        
        printf "$i " 
         done 
         echo 
         break;

        elif [ -w $filename ] 
        then
            printf "changing $filename \n"
            sed -i -e "s/$DDOMAIN/$domainname/g" $filename
            sed -i -e "s/$DSDOMAIN/$slasheddomain/g" $filename
            sed -i -e "s/$DEFAULTIP/$ip_address/g" $filename

          else 
          printf "cannot access file $filename. skipping... \n" 
        fi
        printf "File to Change:"
      done 
  fi
</code></pre></div></div> <p>Change the permission:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/deploy$ chmod +x configurator.sh
</code></pre></div></div> <p>Run the script with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/deploy$ ./configurator.sh 
</code></pre></div></div> <p>It will prompt you to enter <code class="language-plaintext highlighter-rouge">Domain name</code> and <code class="language-plaintext highlighter-rouge">IP Adress</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Domain name is ims.mnc001.mcc001.3gppnetwork.org
IP Adress is your Private IP (172.30.75.103 for the case of this tutorial) 
</code></pre></div></div> <p>Now we want to change realm name in the below files from <code class="language-plaintext highlighter-rouge">open-ims.test</code> to <code class="language-plaintext highlighter-rouge">ims.mnc001.mcc001.3gppnetwork.org</code>.</p> <p>To know which files contain <code class="language-plaintext highlighter-rouge">open-ims.test</code>, (Note that you should be in this directory: <code class="language-plaintext highlighter-rouge">/opt/OpenIMSCore/FHoSS/deploy</code>) do the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/deploy$ grep -r "open-ims"
(it will output files containing term 'open-ims.test')
</code></pre></div></div> <p>Open the founded files with any text editor and change the term <code class="language-plaintext highlighter-rouge">open-ims.test</code> to <code class="language-plaintext highlighter-rouge">ims.mnc001.mcc001.3gppnetwork.org</code>!</p> <p>Now open the file <code class="language-plaintext highlighter-rouge">hibernate.properties</code> and change the value of <code class="language-plaintext highlighter-rouge">hibernate.connection.url</code> to:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hibernate.connection.url=jdbc:mysql://127.0.0.1:3306/hss_db
</code></pre></div></div> <p>Now:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/deploy$ cp configurator.sh ../scripts/
/opt/OpenIMSCore/FHoSS/deploy$ cd ../scripts
</code></pre></div></div> <p>Again find any file containing <code class="language-plaintext highlighter-rouge">open-ims</code>(if there are any) and change it to <code class="language-plaintext highlighter-rouge">ims.mnc001.mcc001.3gppnetwork.org</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/scripts$ grep -r "open-ims"
(it will output files containing term 'open-ims.test')
</code></pre></div></div> <p>Then Run the script with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/scripts$ ./configurator.sh 
</code></pre></div></div> <p>It will prompt you to enter <code class="language-plaintext highlighter-rouge">Domain name</code> and <code class="language-plaintext highlighter-rouge">IP Adress</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Domain name is ims.mnc001.mcc001.3gppnetwork.org
IP Adress is your Private IP (172.30.75.103 for the case of this tutorial) 
</code></pre></div></div> <p>Again:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/scripts$ cp configurator.sh ../config/
/opt/OpenIMSCore/FHoSS/scripts$ cd ../config
</code></pre></div></div> <p>Then:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/config$ ./configurator.sh 
</code></pre></div></div> <p>Then Run the script with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/OpenIMSCore/FHoSS/config$ ./configurator.sh 
</code></pre></div></div> <p>It will prompt you to enter <code class="language-plaintext highlighter-rouge">Domain name</code> and <code class="language-plaintext highlighter-rouge">IP Adress</code>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Domain name is ims.mnc001.mcc001.3gppnetwork.org
IP Adress is your Private IP (172.30.75.103 for the case of this tutorial) 
</code></pre></div></div> <p>Then change any <code class="language-plaintext highlighter-rouge">open-ims.test</code> to <code class="language-plaintext highlighter-rouge">ims.mnc001.mcc001.3gppnetwork.org</code> in file located in <code class="language-plaintext highlighter-rouge">/opt/OpenIMSCore/FHoSS/src-web/web.xml</code>.</p> <h3 id="prepare-mysql-database">Prepare mysql database:</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mysql
&lt;mysql&gt; drop database hss_db;
&lt;mysql&gt; create database hss_db;
&lt;mysql&gt; quit
</code></pre></div></div> <p>Import database located at /opt/OpenIMSCore into hss_db:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /opt/OpenIMSCore
$ mysql -u root -p hss_db &lt; FHoSS/scripts/hss_db.sql
$ mysql -u root -p hss_db &lt; FHoSS/scripts/userdata.sql
</code></pre></div></div> <p>Check grants for mysql access rights at first time installation:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mysql
# See last line in hss_db.sql:
&lt;mysql&gt; grant delete,insert,select,update on hss_db.* to hss@localhost identified by 'hss';
&lt;mysql&gt; grant delete,insert,select,update on hss_db.* to hss@'%' identified by 'hss';
</code></pre></div></div> <p>Check database if domain names are o.k. in various entries and privileges</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mysql -u hss -p
&lt;mysql&gt; show databases;
&lt;mysql&gt; use hss_db;
&lt;mysql&gt; select * from impu;
</code></pre></div></div> <h3 id="prepare-script-file-start-hss">Prepare script-file, start HSS:</h3> <p>Copy startup.sh to hss.sh in root directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cp /opt/OpenIMSCore/FHoSS/deploy/startup.sh /root/hss.sh
</code></pre></div></div> <p>Open file located in <code class="language-plaintext highlighter-rouge">/root/hss.sh</code> and add the following to hss.sh <strong>before echo Building Classpath</strong>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /opt/OpenIMSCore/FHoSS/deploy
JAVA_HOME="/usr/lib/jvm/jdk1.7.0_79"
CLASSPATH="/usr/lib/jvm/jdk1.7.0_79/jre/lib/"
</code></pre></div></div> <h3 id="start-hss-using-hsssh">Start HSS using hss.sh</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo -i
# ./hss.sh
</code></pre></div></div> <h4 id="check-if-hss-is-working">check if HSS is working</h4> <p>Access the web-interface of HSS: http://<IMS_VM_FLOATING_IP>:8080/hss.web.console/</IMS_VM_FLOATING_IP></p> <p>For My case, http://172.30.75.103:8080/hss.web.console/</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user:      hssAdmin
password:  hss
</code></pre></div></div> <p>Till now Installing IMS and EPC core is done. We need to have a RAN part. For RAN we use SRS. ## Installing srsRAN ### Install UHD</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get -y install git swig cmake doxygen build-essential libboost-all-dev libtool libusb-1.0-0 libusb-1.0-0-dev libudev-dev libncurses5-dev libfftw3-bin libfftw3-dev libfftw3-doc libcppunit-1.14-0 libcppunit-dev libcppunit-doc ncurses-bin cpufrequtils python-numpy python-numpy-doc python-numpy-dbg python-scipy python-docutils qt4-bin-dbg qt4-default qt4-doc libqt4-dev libqt4-dev-bin python-qt4 python-qt4-dbg python-qt4-dev python-qt4-doc python-qt4-doc libqwt6abi1 libfftw3-bin libfftw3-dev libfftw3-doc ncurses-bin libncurses5 libncurses5-dev libncurses5-dbg libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake autoconf libtool python-dev libfftw3-dev libcppunit-dev libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev python-wxgtk3.0 git libqt4-dev python-numpy ccache python-opengl libgsl-dev python-cheetah python-mako python-lxml doxygen qt4-default qt4-dev-tools libusb-1.0-0-dev libqwtplot3d-qt5-dev pyqt4-dev-tools python-qwt5-qt4 cmake git wget libxi-dev gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libzmq3-dev libzmq5 python-requests python-sphinx libcomedi-dev python-zmq libqwt-dev libqwt6abi1 python-six libgps-dev libgps23 gpsd gpsd-clients python-gps python-setuptools
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd $HOME
~$ mkdir workarea
~/workarea$ cd workarea
~/workarea$ git clone https://github.com/EttusResearch/uhd
~/workarea$ cd uhd
~/workarea$ cd host
~/workarea/host$ mkdir build
~/workarea$ cd build
~/workarea/build$ cmake ..
~/workarea/buils$ make
~/workarea/buils$ sudo make install
~/workarea/buils$ sudo uhd_images_downloader
~/workarea/buils$ sudo ldconfig
</code></pre></div></div> <h3 id="install-srsran">Install srsRAN</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get install build-essential cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd $HOME
~$ mkdir workarea
~/workarea$ cd workarea
~/workarea$ git clone https://github.com/srsRAN/srsRAN_4G.git
~/workarea$ cd srsRAN_4G
~/workarea/srsRAN_4G$ mkdir build
~/workarea/srsRAN_4G$ cd build
~/workarea/srsRAN_4G/build$ cmake ../
~/workarea/srsRAN_4G/build$ make
~/workarea/srsRAN_4G/build$ make test
~/workarea/srsRAN_4G/build$ sudo make install
~/workarea/srsRAN_4G/build$ srsran_install_configs.sh user 
</code></pre></div></div> <p>This installs srsRAN 4G and also copies the default srsRAN 4G config files to <code class="language-plaintext highlighter-rouge">~/.config/srsran</code>.</p> <p>Installing stuff is done. Configuration remains.</p> <h1 id="configurations"><strong>Configurations</strong></h1> <h2 id="srs-enb">SRS (enB)</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Must have in the eNB:

    Support for QoS
    Support for Dedicated radio bearer creation
    Make sure to check the DRB configuration with respect to QCI of APN accordingly (QCI 5 for ims)
</code></pre></div></div> <p>config files for mentioned features are located in folder srs. Copy all the config files to <code class="language-plaintext highlighter-rouge">~/.config/srsran</code></p> <h2 id="open5gs-epc-core">Open5gs (EPC Core)</h2> <p>config files for Open5gs are located in folder open5gs. Copy all the config files to <code class="language-plaintext highlighter-rouge">where-open5gs-is/install/etc/open5gs</code> Note that in <strong>all of the config files</strong> there is a path starting with <code class="language-plaintext highlighter-rouge">/home/volte/repos/open5gs/...</code> that you should find and replace it to path you have installed open5gs (Otherwise EPC (open5gs) won’t run).</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logger:
    file: path-to-open5gs/install/var/log/open5gs/pcrf.log


  - module: path-to-open5gs/install/lib/x86_64-linux-gnu/freeDiameter/dict_mip6i.fdx
</code></pre></div></div> <p>NOTE:</p> <h3 id="pcrf">pcrf:</h3> <p>Under Connet section, change the addr of the following part to your local (Private IP):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        - identity: pcscf.ims.mnc001.mcc001.3gppnetwork.org
          addr: Your Private IP (172.24.15.30 for thhis tutorial)
          port: 3871
</code></pre></div></div> <h3 id="smf">smf:</h3> <p>Under p-cscf: section, change the IP of the following part to your local (Private IP):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    p-cscf:
      - Your Private IP (172.24.15.30 for thhis tutorial)
</code></pre></div></div> <h3 id="upf">UPF:</h3> <p>In order to have a working UPF, Copy the following content into a script and run it (not consistent after reboot):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>where-ever-you-want$ nano upf.sh
#!/bin/bash

sudo sysctl -w net.ipv4.ip_forward=1
sudo sysctl -w net.ipv6.conf.all.forwarding=1

ip tuntap add name ogstun mode tun
ip addr add 192.168.100.1/24 dev ogstun
ip addr add fd84:6aea:c36e:2b69::/48 dev ogstun
ip link set ogstun mtu 1400
ip link set ogstun up
iptables -t nat -A POSTROUTING -s 192.168.100.0/24 ! -o ogstun -j MASQUERADE
ip6tables -t nat -A POSTROUTING -s fd84:6aea:c36e:2b69::/48 ! -o ogstun -j MASQUERADE
iptables -I INPUT -i ogstun -j ACCEPT
ip6tables -I INPUT -i ogstun -j ACCEPT

ip tuntap add name ogstun2 mode tun
ip addr add 192.168.101.1/24 dev ogstun2
ip addr add fd1f:76f3:da9b:0101::/48 dev ogstun2
ip link set ogstun2 mtu 1400
ip link set ogstun2 up
iptables -t nat -A POSTROUTING -s 192.168.101.0/24 ! -o ogstun2 -j MASQUERADE
ip6tables -t nat -A POSTROUTING -s fd1f:76f3:da9b:0101::/48 ! -o ogstun2 -j MASQUERADE
iptables -I INPUT -i ogstun2 -j ACCEPT
ip6tables -I INPUT -i ogstun2 -j ACCEPT

ufw disable

</code></pre></div></div> <h2 id="ims">IMS</h2> <h3 id="pcscf">PCSCF</h3> <p>Config files are located in: <code class="language-plaintext highlighter-rouge">/etc/kamailio_pcscf</code>: <strong>find and replace</strong> <strong>every IP</strong> = ‘10.4.128.21’ to your local IP in this folder. The following command finds every File containing ‘10.4.128.21’:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/kamailio_pcscf$ grep -r "10.4.128.21"
...
...
</code></pre></div></div> <h3 id="icscf">ICSCF</h3> <p>Config files are located in: <code class="language-plaintext highlighter-rouge">/etc/kamailio_icscf</code>: <strong>find and replace</strong> <strong>every IP</strong> = ‘10.4.128.21’ to your local IP in this folder. The following command finds every File containing ‘10.4.128.21’:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/kamailio_icscf$ grep -r "10.42.28.21"
...
...
...
</code></pre></div></div> <h3 id="scscf">SCSCF</h3> <p>Config files are located in: <code class="language-plaintext highlighter-rouge">/etc/kamailio_scscf</code>: <strong>find and replace</strong> <strong>every IP</strong> = ‘10.4.128.21’ to your local IP in this folder. The following command finds every File containing ‘10.4.128.21’:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/kamailio_icscf$ grep -r "10.42.28.21"
...
...
...
</code></pre></div></div> <h1 id="adding-users-to-hss-and-fhoss">Adding Users to HSS and FHoSS</h1> <h3 id="building-the-webui-of-open5gs">Building the WebUI of Open5GS</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt install curl
$ curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
</code></pre></div></div> <p>Then:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nvm install 17
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd /path-to-open5gs/webui
$ npm ci
</code></pre></div></div> <p>The WebUI runs as an npm script.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ npm run dev
</code></pre></div></div> <h3 id="register-subscriber-information">Register Subscriber Information</h3> <p>Connect to http://127.0.0.1:3000 and login with admin account.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Username : admin
Password : 1423
</code></pre></div></div> <p>To add subscriber information, you can do WebUI operations in the</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>following order:

    Go to Subscriber Menu.
    Click + Button to add a new subscriber.
    Fill the IMSI, security context(K, OPc, AMF), and APN of the subscriber.
    Click SAVE Button

</code></pre></div></div> <p>Assuming IMSI of the user1 as 001010123456791 and MSISDN is 0198765432100 and IMSI of the user2 as 001010123456792 and MSISDN is 0298765432100. Try calling user2 from user1 by dialing its MSISDN ie. 0298765432100.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user1:
  IMSI                                     001010123456791
  Subscriber Key (K)                       d913dac28cea9360011fc9acb25a0215
  Authentication Management Field (AMF)    8000
  USIM Type                                OPc
  Operator Key (OPc/OP)                    10d0729ae91e99cc6787b88ff9fde699

user2:
  IMSI                                     001010123456792
  Subscriber Key (K)                       e9fa28e883dd57b67dee47304fd43649
  Authentication Management Field (AMF)    8000
  USIM Type                                OPc
  Operator Key (OPc/OP)                    d281c054e3b8a5087c43b36f4a5bfe4f 
</code></pre></div></div> <h3 id="usim-and-ue-settings">USIM and UE settings</h3> <p>Make sure to disable SQN check in Sysmocom SIM cards using sysmo-usim-tool tool https://github.com/herlesupreeth/sysmo-usim-tool Tested with OnePlus 5 with following methods (Official Google method is the recommended method to prevent damage to phone)</p> <ul> <li>(Official Google method) - Please follow the instructions in the following link <a href="">@herlesupreeth/CoIMS_Wiki</a> to force enable VoLTE using Carrier Privileges</li> <li>(Risky method) With modfication to enable force IMS registration is a must or else UE will not even attempt to connect to P-CSCF. Need to apply the fix back after each update. https://forum.xda-developers.com/oneplus-5t/how-to/guide-volte-vowifi-german-carriers-t3817542</li> </ul> <p>Add users with following APN settings in Open5GS:</p> <p>(Check out my video on this: https://youtu.be/h6qKHFd41Y4)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>APN Configuration:
---------------------------------------------------------------------------------------------------------------------
| APN      | Type | QCI | ARP | Capability | Vulnerablility | MBR DL/UL(Kbps)     | GBR DL/UL(Kbps) | PGW IP        |
---------------------------------------------------------------------------------------------------------------------
| internet | IPv4 | 9   | 8   | Disabled   | Disabled       | unlimited/unlimited |                 |               |
---------------------------------------------------------------------------------------------------------------------
| ims      | IPv4 | 5   | 1   | Disabled   | Disabled       | 3850/1530           |                 |               |
|          |      | 1   | 2   | Enabled    | Enabled        | 128/128             | 128/128         |               |
|          |      | 2   | 4   | Enabled    | Enabled        | 128/128             | 128/128         |               |
---------------------------------------------------------------------------------------------------------------------
</code></pre></div></div> <h3 id="add-ims-subscription-use-in-fohss-as-follows-from-the-web-gui">Add IMS subscription use in FoHSS as follows from the Web GUI</h3> <p>(See my video: https://youtu.be/tMXIpUZhDgY)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Login to the HSS web console.
(http://172.30.75.103:8080/hss.web.console/)
Navigate to the User Identities page
Create the IMSU 
Click IMS Subscription / Create
Enter:
Name = 001010123456791
Capabilities Set = cap_set1
Preferred S-CSCF = scsf1
Click Save

Create the IMPI and Associate the IMPI to the IMSU
Click Create &amp; Bind new IMPI
Enter:
Identity = 001010123456791@ims.mnc001.mcc001.3gppnetwork.org
Secret Key = 8baf473f2f8fd09487cccbd7097c6862 (Ki value as in Open5GS HSS database)
Authentication Schemes - All
Default = Digest-AKAv1-MD5
AMF = 8000 (As in Open5GS HSS database)
OP = 11111111111111111111111111111111 (As in Open5GS HSS database)
SQN = 000000021090 (SQN value as in Open5GS HSS database)
Click Save

Create and Associate IMPI to IMPU
Click Create &amp; Bind new IMPU
Enter:
Identity = sip:001010123456791@ims.mnc001.mcc001.3gppnetwork.org
Barring = Yes
Service Profile = default_sp
Charging-Info Set = default_charging_set
IMPU Type = Public_User_Identity
Click Save

Add Visited Network to IMPU
Enter:
Visited Network = ims.mnc001.mcc001.3gppnetwork.org
Click Add

Now, goto Public User Identity and create further IMPUs as following

1. tel:0198765432100

Public User Identity -IMPU-
Identity = tel:0198765432100
Service Profile = default_sp
Charging-Info Set = default_charging_set
Can Register = Yes
IMPU Type = Public_User_Identity
Click Save

Add Visited Network to IMPU
Enter:
Visited Network = ims.mnc001.mcc001.3gppnetwork.org
Click Add

Associate IMPI(s) to IMPU
IMPI Identity = 001010123456791@ims.mnc001.mcc001.3gppnetwork.org
Click Add

2. sip:0198765432100@ims.mnc001.mcc001.3gppnetwork.org

Public User Identity -IMPU-
Identity = sip:0198765432100@ims.mnc001.mcc001.3gppnetwork.org
Service Profile = default_sp
Charging-Info Set = default_charging_set
Can Register = Yes
IMPU Type = Public_User_Identity
Click Save

Add Visited Network to IMPU
Enter:
Visited Network = ims.mnc001.mcc001.3gppnetwork.org
Click Add

Associate IMPI(s) to IMPU
IMPI Identity = 001010123456791@ims.mnc001.mcc001.3gppnetwork.org
Click Add

And, finally add these IMPUs as implicit set of IMSI derived IMPU in HSS i.e sip:001010123456791@ims.mnc001.mcc001.3gppnetwork.org as follows:

1. Goto to IMPU sip:001010123456791@ims.mnc001.mcc001.3gppnetwork.org
2. In "Add IMPU(s) to Implicit-Set" section give IMPU Identity created above to be added to this IMPU
</code></pre></div></div> <h3 id="apn-settings">APN settings</h3> <p>Clear all previous APN settings (Very Important). Try to use a clean untouched phone :D</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Then, create APN as follows:

    First create internet APN, APN name: internet, APN type: default –&gt; Save APN
    Then, create ims APN, APN name: ims, APN type: ims –&gt; Save APN

make sure MCC and MNC are set correctly.
</code></pre></div></div> <h1 id="how-to-run">How to run</h1> <h2 id="run-open5gs-as-an-epc-core">Run Open5gs as an EPC Core</h2> <p>Better to use something like Tmux.</p> <pre><code class="language-code"># Terminal 1
~$ path-to-open5gs/install/bin/open5gs-mmed
</code></pre> <pre><code class="language-code"># Terminal 2
~$ path-to-open5gs/install/bin/open5gs-hssd
</code></pre> <pre><code class="language-code"># Terminal 3
~$ path-to-open5gs/install/bin/open5gs-pcrfd
</code></pre> <pre><code class="language-code"># Terminal 4
~$ path-to-open5gs/install/bin/open5gs-sgwcd
</code></pre> <pre><code class="language-code"># Terminal 5
~$ path-to-open5gs/install/bin/open5gs-sgwud
</code></pre> <pre><code class="language-code"># Terminal 6
~$ path-to-open5gs/install/bin/open5gs-smfd
</code></pre> <pre><code class="language-code"># Terminal 7
~$ path-to-open5gs/install/bin/open5gs-upfd
</code></pre> <h2 id="run-kamailio-as-an-ims-core">Run Kamailio as an IMS Core</h2> <p>Better to use something like Tmux.</p> <pre><code class="language-code">// Terminal 1 (Run FHoSS)
$ sudo -i
# ./hss.sh
</code></pre> <pre><code class="language-code">// Terminal 2 (Run PCSCF)
~$ sudo mkdir -p /var/run/kamailio_pcscf
~$ sudo -i
~$ kamailio -f /etc/kamailio_pcscf/kamailio_pcscf.cfg -P /kamailio_pcscf.pid -DD -E -e 
</code></pre> <pre><code class="language-code">// Terminal 2 (Run SCSCF)
~$ sudo mkdir -p /var/run/kamailio_scscf
~$ sudo -i
~$ kamailio -f /etc/kamailio_scscf/kamailio_scscf.cfg -P /kamailio_scscf.pid -DD -E -e  
</code></pre> <pre><code class="language-code">// Terminal 2 (Run ICSCF)
~$ sudo mkdir -p /var/run/kamailio_icscf
~$ sudo -i
~$ kamailio -f /etc/kamailio_icscf/kamailio_icscf.cfg -P /kamailio_icscf.pid -DD -E -e  
</code></pre> <h2 id="run-srsenb-as-an-enb">Run srseNB as an eNB</h2> <pre><code class="language-code">// Terminal 2 (Run The Tower)
~$ sudo srsenb
</code></pre> <p>Done! Connect the phone and enjoy.</p> <h1 id="srtp">SRTP</h1> <p>In order to have SRTP, copy paste the config file located in the srtp file (named ‘rtp.cfg’) to <code class="language-plaintext highlighter-rouge">/etc/kamailio_pcscf/route/</code> and replace it with the existing file.</p> <p>In order to enable srtp on the phone, you need to change the ims profile on the UE (That is not easy).</p>]]></content><author><name></name></author><category term="VoLTE"/><category term="LTE"/><category term="Open5GS"/><category term="Kamailio"/><category term="SRS"/><summary type="html"><![CDATA[Step-By-Step instruction to setup VoLTE with Kamailio IMS, Open5GS core and SRS RAN]]></summary></entry></feed>